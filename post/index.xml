<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 徐超Blog</title>
    <link>http://goblinlaboratory.win/post/index.xml</link>
    <description>Recent content in Posts on 徐超Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 May 2018 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://goblinlaboratory.win/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lua作图教程之设计模式</title>
      <link>http://goblinlaboratory.win/post/Lua%E4%BD%9C%E5%9B%BE%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/Lua%E4%BD%9C%E5%9B%BE%E6%95%99%E7%A8%8B%E4%B9%8B%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;h2 id=&#34;设计模式&#34;&gt;设计模式&lt;/h2&gt;

&lt;p&gt;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;到目前为止，我在用lua作图时只用到了单例模式，其他设计在后续开发中在逐步添加。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    --[[  
    优点  
    一、实例控制  
    单例模式会阻止其他对象实例化其自己的单例对象的副本，从而确保所有对象都访问唯一实例。  
    二、灵活性  
    因为类控制了实例化过程，所以类可以灵活更改实例化过程。  
  
    缺点  
    一、开销  
    虽然数量很少，但如果每次对象请求引用时都要检查是否存在类的实例，将仍然需要一些开销。可以通过使用静态初始化解决此问题。  
    二、可能的开发混淆  
    使用单例对象（尤其在类库中定义的对象）时，开发人员必须记住自己不能使用new关键字实例化对象。因为可能无法访问库源代码，因此应用程序开发人员可能会意外发现自己无法直接实例化此类。  
    三、对象生存期  
    不能解决删除单个对象的问题。在提供内存管理的语言中（例如基于.NET Framework的语言），只有单例类能够导致实例被取消分配，因为它包含对该实例的私有引用。在某些语言中（如 C++），其他类可以删除对象实例，但这样会导致单例类中出现悬浮引用。  
  
]]--  
  
Singleton = {}  
function Singleton:new(o)  
    o = o or {}  
    setmetatable(o,self)  
    self.__index = self  
    return o  
end  
  
function Singleton:Instance()  
    if self.instance == nil then  
        self.instance = self:new()  
    end  
    return self.instance  
end  
  
  
s1 = Singleton:Instance()  
  
s2 = Singleton:Instance()  
  
if s1 == s2 then  
    print(&amp;quot;两个对象是相同的实例&amp;quot;)  
end  
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Lua作图教程之lua面向对象</title>
      <link>http://goblinlaboratory.win/post/Lua%E4%BD%9C%E5%9B%BE%E6%95%99%E7%A8%8B%E4%B9%8Blua%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/Lua%E4%BD%9C%E5%9B%BE%E6%95%99%E7%A8%8B%E4%B9%8Blua%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;p&gt;面向对象编程（Object Oriented Programming，OOP）是一种非常流行的计算机编程架构。
以下几种编程语言都支持面向对象编程：&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Objective-C&lt;/li&gt;
&lt;li&gt;Smalltalk&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;面向对象特征&#34;&gt;面向对象特征&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1） 封装：指能够把一个实体的信息、功能、响应都装入一个单独的对象中的特性。&lt;/li&gt;
&lt;li&gt;2） 继承：继承的方法允许在不改动原程序的基础上对其进行扩充，这样使得原功能得以保存，而新功能也得以扩展。这有利于减少重复编码，提高软件的开发效率。&lt;/li&gt;
&lt;li&gt;3） 多态：同一操作作用于不同的对象，可以有不同的解释，产生不同的执行结果。在运行时，可以通过指向基类的指针，来调用实现派生类中的方法。&lt;/li&gt;
&lt;li&gt;4）抽象：抽象(Abstraction)是简化复杂的现实问题的途径，它可以为具体问题找到最恰当的类定义，并且可以在最恰当的继承级别解释问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lua-中面向对象&#34;&gt;Lua 中面向对象&lt;/h3&gt;

&lt;p&gt;我们知道，对象由属性和方法组成。LUA中最基本的结构是table，所以需要用table来描述对象的属性。&lt;/p&gt;

&lt;p&gt;lua中的function可以用来表示方法。那么LUA中的类可以通过table + function模拟出来。&lt;/p&gt;

&lt;p&gt;至于继承，可以通过metetable模拟出来（不推荐用，只模拟最基本的对象大部分时间够用了）。&lt;/p&gt;

&lt;p&gt;Lua中的表不仅在某种意义上是一种对象。像对象一样，表也有状态（成员变量）；也有与对象的值独立的本性，特别是拥有两个不同值的对象（table）代表两个不同的对象；一个对象在不同的时候也可以有不同的值，但他始终是一个对象；与对象类似，表的生命周期与其由什么创建、在哪创建没有关系。对象有他们的成员函数，表也有：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;
Account = {balance = 0}
function Account.withdraw (v)
    Account.balance = Account.balance - v
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个定义创建了一个新的函数，并且保存在Account对象的withdraw域内，下面我们可以这样调用：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Account.withdraw(100.00)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;一个简单实例&#34;&gt;一个简单实例&lt;/h4&gt;

&lt;p&gt;以下简单的类包含了三个属性： area, length 和 breadth，printArea方法用于打印计算结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Meta class
Rectangle = {area = 0, length = 0, breadth = 0}

-- 派生类的方法 new
function Rectangle:new (o,length,breadth)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  self.length = length or 0
  self.breadth = breadth or 0
  self.area = length*breadth;
  return o
end

-- 派生类的方法 printArea
function Rectangle:printArea ()
  print(&amp;quot;矩形面积为 &amp;quot;,self.area)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;创建对象&#34;&gt;创建对象&lt;/h4&gt;

&lt;p&gt;创建对象是为类的实例分配内存的过程。每个类都有属于自己的内存并共享公共数据。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;r = Rectangle:new(nil,10,20)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;访问属性&#34;&gt;访问属性&lt;/h4&gt;

&lt;p&gt;我们可以使用点号(.)来访问类的属性：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;print(r.length)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;访问成员函数&#34;&gt;访问成员函数&lt;/h4&gt;

&lt;p&gt;我们可以使用冒号 : 来访问类的成员函数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;r:printArea()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内存在对象初始化时分配。&lt;/p&gt;

&lt;h4 id=&#34;完整实例&#34;&gt;完整实例&lt;/h4&gt;

&lt;p&gt;以下我们演示了 Lua 面向对象的完整实例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Meta class
Shape = {area = 0}

-- 基础类方法 new
function Shape:new (o,side)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  side = side or 0
  self.area = side*side;
  return o
end

-- 基础类方法 printArea
function Shape:printArea ()
  print(&amp;quot;面积为 &amp;quot;,self.area)
end

-- 创建对象
myshape = Shape:new(nil,10)

myshape:printArea()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行以上程序，输出结果为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;面积为     100
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;lua-继承&#34;&gt;Lua 继承&lt;/h4&gt;

&lt;p&gt;继承是指一个对象直接使用另一对象的属性和方法。可用于扩展基础类的属性和方法。
以下演示了一个简单的继承实例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;
 -- Meta class
Shape = {area = 0}
-- 基础类方法 new
function Shape:new (o,side)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  side = side or 0
  self.area = side*side;
  return o
end
-- 基础类方法 printArea
function Shape:printArea ()
  print(&amp;quot;面积为 &amp;quot;,self.area)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来的实例，Square 对象继承了 Shape 类:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Square = Shape:new()
-- Derived class method new
function Square:new (o,side)
  o = o or Shape:new(o,side)
  setmetatable(o, self)
  self.__index = self
  return o
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;完整实例-1&#34;&gt;完整实例&lt;/h4&gt;

&lt;p&gt;以下实例我们继承了一个简单的类，来扩展派生类的方法，派生类中保留了继承类的成员变量和方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Meta class
Shape = {area = 0}
-- 基础类方法 new
function Shape:new (o,side)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  side = side or 0
  self.area = side*side;
  return o
end
-- 基础类方法 printArea
function Shape:printArea ()
  print(&amp;quot;面积为 &amp;quot;,self.area)
end

-- 创建对象
myshape = Shape:new(nil,10)
myshape:printArea()

Square = Shape:new()
-- 派生类方法 new
function Square:new (o,side)
  o = o or Shape:new(o,side)
  setmetatable(o, self)
  self.__index = self
  return o
end

-- 派生类方法 printArea
function Square:printArea ()
  print(&amp;quot;正方形面积为 &amp;quot;,self.area)
end

-- 创建对象
mysquare = Square:new(nil,10)
mysquare:printArea()

Rectangle = Shape:new()
-- 派生类方法 new
function Rectangle:new (o,length,breadth)
  o = o or Shape:new(o)
  setmetatable(o, self)
  self.__index = self
  self.area = length * breadth
  return o
end

-- 派生类方法 printArea
function Rectangle:printArea ()
  print(&amp;quot;矩形面积为 &amp;quot;,self.area)
end

-- 创建对象
myrectangle = Rectangle:new(nil,10,20)
myrectangle:printArea()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行以上代码，输出结果为：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;面积为     100
正方形面积为     100
矩形面积为     200
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;函数重写&#34;&gt;函数重写&lt;/h4&gt;

&lt;p&gt;Lua 中我们可以重写基础类的函数，在派生类中定义自己的实现方式：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- 派生类方法 printArea
function Square:printArea ()
  print(&amp;quot;正方形面积 &amp;quot;,self.area)
end
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Lua作图教程之开发调试环境搭建</title>
      <link>http://goblinlaboratory.win/post/Lua%E4%BD%9C%E5%9B%BE%E6%95%99%E7%A8%8B%E4%B9%8B%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Thu, 03 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/Lua%E4%BD%9C%E5%9B%BE%E6%95%99%E7%A8%8B%E4%B9%8B%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>&lt;p&gt;5.1 以后就没有很好的lua IDE可用了，luastudio不错但是小贵，发现有位仁兄写了个 visual studio code的lua调试插件，试了一下还不错 &lt;a href=&#34;https://github.com/actboy168/vscode-lua-debug&#34;&gt;插件源码&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;环境搭建&#34;&gt;环境搭建&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;去微软官方下载vscode &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;软件下载地址&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装Lua 5.3 Debug 插件，在vscode中按Ctrl+P，输入 ext install lua-debug&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20161104010436388&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;vscode的调试需要在一个文件夹中，随便建一个文件夹比如叫luaproject 里面建一个lua文件叫run.lua&lt;/li&gt;

&lt;li&gt;&lt;p&gt;配置调试工具&lt;/p&gt;

&lt;p&gt;打开lua的调试配置&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20161104010854688&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20161104010908407&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;直接调试lua文件修改lanuce里面的program项&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;    {
    &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
    &amp;quot;configurations&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;lua&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
            &amp;quot;stopOnEntry&amp;quot;: true,
            &amp;quot;program&amp;quot;: &amp;quot;${workspaceRoot}/run.lua&amp;quot;,
            &amp;quot;cwd&amp;quot;: &amp;quot;${workspaceRoot}&amp;quot;,
            &amp;quot;path&amp;quot;: &amp;quot;${workspaceRoot}/?.lua&amp;quot;,
            &amp;quot;cpath&amp;quot;: &amp;quot;${workspaceRoot}/?.dll&amp;quot;,
            &amp;quot;arg&amp;quot;: [],
            &amp;quot;console&amp;quot;: &amp;quot;ansi&amp;quot;
        },
        {
            &amp;quot;name&amp;quot;: &amp;quot;attach&amp;quot;,
            &amp;quot;type&amp;quot;: &amp;quot;lua&amp;quot;,
            &amp;quot;request&amp;quot;: &amp;quot;attach&amp;quot;,
            &amp;quot;stopOnEntry&amp;quot;: true,
            &amp;quot;ip&amp;quot;: &amp;quot;localhost&amp;quot;,
            &amp;quot;port&amp;quot;: 4278,
            &amp;quot;sourceMaps&amp;quot;: [
                [
                    &amp;quot;./&amp;quot;,
                    &amp;quot;${workspaceRoot}&amp;quot;
                ]
            ]
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20161104011657300&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;开始调试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果”stopOnEntry”: true 则进入调试状态便断在开头 按F5直接运行到打断点的地方。可以方便的查看这个变量的值和运行状态&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20161104011855937&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;lua调试器详细说明&#34;&gt;lua调试器详细说明&lt;/h3&gt;

&lt;h5 id=&#34;模块功能&#34;&gt;模块功能&lt;/h5&gt;

&lt;p&gt;vscode-debug-client.exe 代理客户端。在launch模式中，vscode-debug-client.exe会用vscode-debug.dll创建一个调试器进行调试。&lt;/p&gt;

&lt;p&gt;在attach模式中，vscode-debug-client.exe会连接一个远程的调试器(也是由vscode-debug.dll创建的)，vscode-debug-client.exe只负责在vscode-debug.dll和vscode之间转发消息。&lt;/p&gt;

&lt;p&gt;vscode-debug.dll 调试器的核心模块。你可以在你的程序中加载vscode-debug.dll并创建调试器，这样vscode就可以通过attach模式进行调试。&lt;/p&gt;

&lt;p&gt;luacore.dll lua核心模块。如果你的程序定制了lua，你可以替换掉它。&lt;/p&gt;

&lt;h3 id=&#34;配置launch-json&#34;&gt;配置launch.json&lt;/h3&gt;

&lt;h5 id=&#34;launch模式-等同于使用lua-exe来执行你的代码&#34;&gt;launch模式，等同于使用lua.exe来执行你的代码。&lt;/h5&gt;

&lt;p&gt;program，lua.exe执行的入口文件&lt;/p&gt;

&lt;p&gt;cwd，lua.exe的当前目录&lt;/p&gt;

&lt;p&gt;stopOnEntry，开始调试时是否先暂停&lt;/p&gt;

&lt;p&gt;luadll，指定lua dll的路径，如有不填会加载luacore.dll&lt;/p&gt;

&lt;p&gt;path，用于初始化package.path&lt;/p&gt;

&lt;p&gt;cpath，用于初始化package.cpath&lt;/p&gt;

&lt;p&gt;arg，lua.exe的命令行参数，用于初始化arg&lt;/p&gt;

&lt;p&gt;console，lua的标准输出的编码，可选择utf8、ansi、none，当是none时不会重定向标准输出到vscode&lt;/p&gt;

&lt;p&gt;sourceMaps，一般不需要，作用同attach模式&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lua作图教程之lua基础</title>
      <link>http://goblinlaboratory.win/post/Lua%E4%BD%9C%E5%9B%BE%E6%95%99%E7%A8%8B%E4%B9%8Blua%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/Lua%E4%BD%9C%E5%9B%BE%E6%95%99%E7%A8%8B%E4%B9%8Blua%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;p&gt;Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-什么是lua&#34;&gt;一、什么是Lua？&lt;/h2&gt;

&lt;p&gt;Lua 是一个小巧的脚本语言，巴西里约热内卢天主教大学里的一个研究小组于1993年开发，其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。一个完整的Lua解释器不过200k，在目前所有脚本引擎中，Lua的速度是最快的。这一切都决定了Lua是作为嵌入式脚本的最佳选择。相比Python和Per的内核，Lua的内核小于120KB，而Python的内核大约860KB，Perl的内核大约1.1MB。Lua语言支持面向对象编程和函数式编程，它提供了一个通用类型的表table，可以实现数组、哈希表、集合、对象的功能。Lua支持协同进程机制。作为一门可扩展的语言，Lua提供简单而稳定的交互接口，如Lua和C程序可通过一个堆栈交换数据，这使得Lua语言可以快速地和其它语言实现整合。总体来说，Lua语言具备以下优点：(1)语言优美、轻巧  (2)性能优良、速度快  (3)可扩展性强。正因为Lua语言具备了这样的特点，使得它能和游戏开发领域的需求完美地结合起来，因为我们需要这样的一门语言，它能够和C/C++进行完美地交互，因为我们需要它对底层进行封装。它需要足够地简单，因为我们需要简单、灵活、快速地编写代码。那么显然Lua就是我们一直在寻找地这种语言。&lt;/p&gt;

&lt;h2 id=&#34;二-lua可以做什么&#34;&gt;二、Lua可以做什么？&lt;/h2&gt;

&lt;p&gt;尽管博主已经告诉了大家太多的关于Lua语言的优秀特性，相信大家仍然会对Lua语言的能力存在怀疑。大家或许会想，Lua到底可以做什么呢？在《Lua游戏开发》一书中作者已经告诉了我们答案：&lt;/p&gt;

&lt;p&gt;1、编辑游戏的用户界面&lt;/p&gt;

&lt;p&gt;2、定义、存储和管理基础游戏数据&lt;/p&gt;

&lt;p&gt;3、管理实时游戏事件&lt;/p&gt;

&lt;p&gt;4、创建和维护开发者友好的游戏存储和载入系统&lt;/p&gt;

&lt;p&gt;5、编写游戏的人工智能系统&lt;/p&gt;

&lt;p&gt;6、创建功能原型，可以之后用高性能语言移植&lt;/p&gt;

&lt;p&gt;这时候我们似乎觉得Lua语言在某种程度上就是专门为游戏开发而诞生的，因为它将大量的优秀特性全部指向了游戏开发领域，因此Lua语言走进走进游戏开发领域变得顺利成章，那么，让我们接着往下看吧，Lua在游戏开发领域有那些成熟的案例吧。&lt;/p&gt;

&lt;h2 id=&#34;三-哪些游戏使用了lua&#34;&gt;三、哪些游戏使用了Lua？&lt;/h2&gt;

&lt;p&gt;1、魔兽世界&lt;/p&gt;

&lt;p&gt;如果提到Lua在游戏领域中第一次崭露头角，我们就不能不说《魔兽世界》这款游戏，由于《魔兽世界》在其客户端中使用了Lua，使得Lua在游戏领域的作用第一次被展示出来，Lua语言因此在游戏开发领域成名。Lua语言的虚拟机很轻巧，可以很容易地嵌入到客户端程序中。如果需要更新客户端，只需要更新脚本程序即可，无需重新编译整个客户端。这样地优点使得Lua在游戏开发领域一战成名，可以说是《魔兽世界》为游戏开发领域带来了这样激动人心的伟大语言，作为Lua在游戏领域攻城略地的尝试，《魔兽世界》功不可没。&lt;/p&gt;

&lt;p&gt;2、大话西游2&lt;/p&gt;

&lt;p&gt;如果说《魔兽世界》开辟Lua在国外游戏领域地战场，那么网易的《大话西游2》无疑是开启了国内游戏制作公司使用Lua的先河。2002年网易开发《大话西游2》时，决定在客户端内嵌入新的脚本语言，因为当时使用的微软JScript存在较多Bug、维护不便、兼容性差。当时该项目技术负责人云风吸取了《大话西游1》时外挂泛滥的教训，决定选择一个新的语言，这样既能摆脱对JScript的依赖，又能有效地打击外挂制作者，权衡再三，最终选择了Lua 4.0。后来《大话西游2》在市场上取得了成功，国内游戏开发行业纷纷受此影响采用Lua，可以说是网易Lua走进了国内开发者的视野，不过到今天为止，Lua在国内仍然是一门较为小众的语言，从《大话西游2》引领国内开发者将视角转向Lua到今天将近10余年地时间，此中缘由，只有大家自己去想个清楚啦。&lt;/p&gt;

&lt;h2 id=&#34;四-带你走进lua的世界&#34;&gt;四、带你走进Lua的世界&lt;/h2&gt;

&lt;p&gt;最后想和大家分享是Lua语言编程的一个简单的示例，因为博主觉得以后做游戏用脚本语言的场景会越来越多，所以能学会一门脚本语言能为你的游戏开发之路增色不少。因为博主刚开始学，所以脚本中有不足之处，希望大家能谅解，在学校的时间一天天地在减少，博主希望能和大家共同度过最后的这段时间。博主使用的是Lua5.2，使用的Sublime Text2作为脚本编辑器配合LuaDev插件进行编程的，如果大家想用懒惰点的办法，可以使用Lua for Windows这个集成环境。好了，下面开始吧，作为第一个Lua程序，我们直接给出代码，具体的语法及API大家可以自己去查阅。&lt;/p&gt;

&lt;h4 id=&#34;注释&#34;&gt;注释&lt;/h4&gt;

&lt;p&gt;写一个程序，总是少不了注释的。&lt;/p&gt;

&lt;p&gt;在Lua中，你可以使用单行注释和多行注释。&lt;/p&gt;

&lt;p&gt;单行注释中，连续两个减号&amp;rdquo;&amp;ndash;&amp;ldquo;表示注释的开始，一直延续到行末为止。相当于C++语言中的&amp;rdquo;//&amp;ldquo;。&lt;/p&gt;

&lt;p&gt;多行注释中，由&amp;rdquo;&amp;ndash;[[&amp;ldquo;表示注释开始，并且一直延续到&amp;rdquo;]]&amp;ldquo;为止。这种注释相当于C语言中的&amp;rdquo;/**/&amp;ldquo;。在注释当中，&amp;rdquo;[[&amp;ldquo;和&amp;rdquo;]]&amp;ldquo;是可以嵌套的。&lt;/p&gt;

&lt;h4 id=&#34;lua-数据类型&#34;&gt;Lua 数据类型&lt;/h4&gt;

&lt;p&gt;Lua是动态类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。&lt;/p&gt;

&lt;p&gt;Lua中有8个基本类型分别为：nil、boolean、number、string、userdata、function、thread和table。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;nil&lt;/td&gt;
&lt;td&gt;这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;包含两个值：false和true。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;表示双精度类型的实浮点数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;字符串由一对双引号或单引号来表示&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;function&lt;/td&gt;
&lt;td&gt;由 C 或 Lua 编写的函数&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;userdata&lt;/td&gt;
&lt;td&gt;表示任意存储在变量中的C数据结构&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;thread&lt;/td&gt;
&lt;td&gt;表示执行的独立线路，用于执行协同程序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;table&lt;/td&gt;
&lt;td&gt;Lua 中的表（table）其实是一个&amp;rdquo;关联数组&amp;rdquo;（associative arrays），数组的索引可以是数字或者是字符串。在 Lua 里，table 的创建是通过&amp;rdquo;构造表达式&amp;rdquo;来完成，最简单构造表达式是{}，用来创建一个空表。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;lua-变量&#34;&gt;Lua 变量&lt;/h4&gt;

&lt;p&gt;变量在使用前，必须在代码中进行声明，即创建该变量。&lt;/p&gt;

&lt;p&gt;编译程序执行代码之前编译器需要知道如何给语句变量开辟存储区，用于存储变量的值。&lt;/p&gt;

&lt;p&gt;Lua 变量有三种类型：全局变量、局部变量、表中的域。&lt;/p&gt;

&lt;p&gt;Lua 中的变量全是全局变量，那怕是语句块或是函数里，除非用 local 显式声明为局部变量。&lt;/p&gt;

&lt;p&gt;局部变量的作用域为从声明位置开始到所在语句块结束。&lt;/p&gt;

&lt;p&gt;变量的默认值均为 nil。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    a = 5               -- 全局变量
    local b = 5         -- 局部变量

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lua-编程&#34;&gt;Lua 编程&lt;/h3&gt;

&lt;p&gt;经典的&amp;rdquo;Hello world&amp;rdquo;的程序总是被用来开始介绍一种语言。在Lua中，写一个这样的程序很简单：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    print(&amp;quot;Hello world&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Lua中，语句之间可以用分号&amp;rdquo;；&amp;rdquo;隔开，也可以用空白隔开。一般来说，如果多个语句写在同一行的话，建议总是用分号隔开。&lt;/p&gt;

&lt;p&gt;Lua 有好几种程序控制语句，如：&lt;/p&gt;

&lt;p&gt;　　条件控制： if 条件 then … elseif 条件 then … else … end&lt;/p&gt;

&lt;p&gt;　　While循环： while 条件 do … end&lt;/p&gt;

&lt;p&gt;　　Repeat循环： repeat … until 条件&lt;/p&gt;

&lt;p&gt;　　For循环： for 变量 = 初值，终点值，步进 do … end&lt;/p&gt;

&lt;p&gt;　　For循环： for 变量1，变量2，… ，变量N in表或枚举函数 do … end&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;注意一下，for的循环变量总是只作用于for的局部变量，你也可以省略步进值，这时候，for循环会使用1作为步进值。 你可以用break来中止一个循环。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你有程序设计的基础，比如你学过Basic，C之类的，你会觉得Lua也不难。但Lua有几个地方是明显不同于这些程序设计语言的，所以请特别注意。&lt;/p&gt;

&lt;h4 id=&#34;语句块&#34;&gt;语句块&lt;/h4&gt;

&lt;p&gt;语句块在C++中是用&amp;rdquo;{&amp;ldquo;和&amp;rdquo;}&amp;ldquo;括起来的，在Lua中，它是用do 和 end 括起来的。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    do print(&amp;quot;Hello&amp;quot;) end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;你可以在 函数 中和 语句块 中定局部变量。&lt;/p&gt;

&lt;h4 id=&#34;赋值语句&#34;&gt;赋值语句&lt;/h4&gt;

&lt;p&gt;赋值语句在Lua被强化了。它可以同时给多个变量赋值。
例如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    a,b,c,d=1,2,3,4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;甚至是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    a,b=b,a -- 多么方便的交换变量功能啊。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在默认情况下，变量总是认为是全局的。假如你要定义局部变量，则在第一次赋值的时候，需要用local说明。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;     local a,b,c = 1,2,3 -- a,b,c都是局部变量
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;循环语句&#34;&gt;循环语句&lt;/h4&gt;

&lt;p&gt;while 循环：while 条件 do … end&lt;/p&gt;

&lt;p&gt;repeat 循环：repeat … until 条件&lt;/p&gt;

&lt;p&gt;for 循环：for 变量 = 初值，终点值，步进 do … end&lt;/p&gt;

&lt;p&gt;for 循环：for 变量1，变量2，… ，变量N in表或枚举函数 do … end&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;while:

    my_table = {1,2,3}
    local index = 1 -- 注意: table 中的索引从1开始
    while my_table[index] do -- 只要条件返回True,就一直执行循环
    print(my_table[index])
    index = index +1 -- Lua中没有i++ 的写法,所以只能用这种写法
    end
    -- 输出 1
    -- 2
    -- 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;repeat:(相当于其他语言中的do&amp;hellip;while)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    local snum = 1 --起始值
    repeat
    print(&amp;quot;snum is &amp;quot;..snum)
    snum = snum + 1
    until snum == 4 --当snum 等于 4 时 跳出循环
    --输出:
    --snum is 1
    --snum is 2
    --snum is 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    for i=1,10,2 do -- 这里i=1表示起始值, 10 表示最大值, 2表示步进值(可以没有,默认值为1,也就是其他语言里的i++)
        print(i)
    end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意一下，for的循环变量总是只作用于for的局部变量，你也可以省略步进值，这时候，for循环会使用 1 作为步进值。&lt;/p&gt;

&lt;p&gt;可以用break来中止一个循环。&lt;/p&gt;

&lt;h4 id=&#34;数值运算&#34;&gt;数值运算&lt;/h4&gt;

&lt;p&gt;和C语言一样，支持+, -, *, /。但Lua还多了一个&amp;rdquo;^&amp;ldquo;。这表示指数乘方运算。比如2^3 结果为8, 2^4结果为16。
连接两个字符串，可以用&amp;rdquo;..&amp;ldquo;运处符。如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    &amp;quot;This a &amp;quot; .. &amp;quot;string.&amp;quot; -- 等于 &amp;quot;this a string&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;比较运算&#34;&gt;比较运算&lt;/h4&gt;

&lt;p&gt;&amp;lt; &amp;gt; &amp;lt;= &amp;gt;= == ~=
分别表示 小于，大于，不大于，不小于，相等，不相等
所有这些操作符总是返回 true 或 false。
对于Table，Function和Userdata类型的数据，只有 == 和 ~=可以用。相等表示两个变量引用的是同一个数据。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    a={1,2}
    b=a
    print(a==b, a~=b) -- true, false
    a={1,2}
    b={1,2}
    print(a==b, a~=b) -- false, true
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;逻辑运算&#34;&gt;逻辑运算&lt;/h4&gt;

&lt;p&gt;and, or, not&lt;/p&gt;

&lt;p&gt;其中，and 和 or 与C语言区别特别大。
在这里，请先记住，在Lua中，只有 false 和 nil 才计算为 false，其它任何数据都计算为 true，0 也是 true！&lt;/p&gt;

&lt;p&gt;　　and 和 or 的运算结果不是 true和false，而是和它的两个操作数相关。&lt;/p&gt;

&lt;p&gt;　　a and b： 如果a为false，则返回a；否则返回b&lt;/p&gt;

&lt;p&gt;　　a or b： 如果 a 为true，则返回a；否则返回b&lt;/p&gt;

&lt;p&gt;举几个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    print(4 and 5) --&amp;gt; 5
    print(nil and 13) --&amp;gt; nil
    print(false and 13) --&amp;gt; false
    print(4 or 5) --&amp;gt; 4
    print(false or 5) --&amp;gt; 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Lua中这是很有用的特性，也是比较令人混洧的特性。
我们可以模拟C语言中的语句：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    x = a? b : c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在Lua中，可以写成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    x = a and b or c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最有用的语句是：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    x = x or v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;它相当于：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    if not x then x = v end
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;table&#34;&gt;Table&lt;/h4&gt;

&lt;p&gt;关系表类型，这是一个很强大的类型。我们可以把这个类型看作是一个数组。只是C语言的数组，只能用正整数来作索引；在Lua中，你可以用任意类型来作数组的索引，除了nil。同样，在C语言中，数组的内容只允许一种类型；在Lua中，你也可以用任意类型的值来作数组的内容，除了nil。&lt;/p&gt;

&lt;p&gt;Table的定义很简单，它的主要特征是用&amp;rdquo;{&amp;ldquo;和&amp;rdquo;}&amp;ldquo;来括起一系列数据元素的。比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    T1 = {} -- 定义一个空表
    T1[1]=10 -- 然后我们就可以象C语言一样来使用它了。
    T1[&amp;quot;John&amp;quot;]={Age=27, Gender=&amp;quot;Male&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这一句相当于：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    T1[&amp;quot;John&amp;quot;]={} -- 必须先定义成一个表，还记得未定义的变量是nil类型吗
    T1[&amp;quot;John&amp;quot;][&amp;quot;Age&amp;quot;]=27
    T1[&amp;quot;John&amp;quot;][&amp;quot;Gender&amp;quot;]=&amp;quot;Male&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当表的索引是字符串的时候，我们可以简写成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    T1.John={}
    T1.John.Age=27
    T1.John.Gender=&amp;quot;Male&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    T1.John{Age=27, Gender=&amp;quot;Male&amp;quot;} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一个很强的特性。
在定义表的时候，我们可以把所有的数据内容一起写在&amp;rdquo;{&amp;ldquo;和&amp;rdquo;}&amp;ldquo;之间，这样子是非常方便，而且很好看。比如，前面的T1的定义，我们可以这么写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    T1=
    　　{
        10, -- 相当于 [1] = 10
        [100] = 40,
        John= -- 如果你原意，你还可以写成：[&amp;quot;John&amp;quot;] =
        {
        Age=27, -- 如果你原意，你还可以写成：[&amp;quot;Age&amp;quot;] =27
        Gender=Male -- 如果你原意，你还可以写成：[&amp;quot;Gender&amp;quot;] =Male
        },
        20 -- 相当于 [2] = 20
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看起来很漂亮，不是吗？我们在写的时候，需要注意三点：&lt;/p&gt;

&lt;p&gt;　　第一，所有元素之间，总是用逗号&amp;rdquo;，&amp;rdquo;隔开；&lt;/p&gt;

&lt;p&gt;　　第二，所有索引值都需要用&amp;rdquo;[&amp;ldquo;和&amp;rdquo;]&amp;ldquo;括起来；如果是字符串，还可以去掉引号和中括号；&lt;/p&gt;

&lt;p&gt;　　第三，如果不写索引，则索引就会被认为是数字，并按顺序自动从1往后编；&lt;/p&gt;

&lt;p&gt;　　表类型的构造是如此的方便，以致于常常被人用来代替配置文件。是的，不用怀疑，它比ini文件要漂亮，并且强大的多。&lt;/p&gt;

&lt;h4 id=&#34;lua-函数&#34;&gt;Lua 函数&lt;/h4&gt;

&lt;p&gt;在Lua中，函数是对语句和表达式进行抽象的主要方法。既可以用来处理一些特殊的工作，也可以用来计算一些值。&lt;/p&gt;

&lt;p&gt;Lua 提供了许多的内建函数，你可以很方便的在程序中调用它们，如print()函数可以将传入的参数打印在控制台上。&lt;/p&gt;

&lt;p&gt;Lua 函数主要有两种用途：&lt;/p&gt;

&lt;p&gt;1.完成指定的任务，这种情况下函数作为调用语句使用；&lt;/p&gt;

&lt;p&gt;2.计算并返回值，这种情况下函数作为赋值语句的表达式使用。&lt;/p&gt;

&lt;p&gt;函数，在Lua中，函数的定义也很简单。典型的定义如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    function add(a,b) -- add 是函数名字，a和b是参数名字
        return a+b -- return 用来返回函数的运行结果
    end 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请注意，return语言一定要写在end之前。假如你非要在中间放上一句return，那么请写成：do return end。
还记得前面说过，函数也是变量类型吗？上面的函数定义，其实相当于：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    add = function (a,b) return a+b end 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当你重新给add赋值时，它就不再表示这个函数了。你甚至可以赋给add任意数据，包括nil （这样，你就清除了add变量）。Function是不是很象C语言的函数指针呢？
和C语言一样，Lua的函数可以接受可变参数个数，它同样是用&amp;rdquo;…&amp;rdquo;来定义的，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    function sum (a,b,…)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想取得…所代表的参数，可以在函数中访问arg局部变量（表类型）得到。如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    sum(1,2,3,4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则，在函数中，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    a = 1, b = 2, arg = {3, 4}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更可贵的是，它可以同时返回多个结果，比如：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    function s()
    　　return 1,2,3,4
    end
    a,b,c,d = s() -- 此时，a = 1, b = 2, c = 3, d = 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前面说过，表类型可以拥有任意类型的值，包括函数！因此，有一个很强大的特性是，拥有函数的表，哦，我想更恰当的应该说是对象吧。Lua可以使用面向对象编程了。不信？那我举例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    t = {
    　　　　 Age = 27
    　　　　 add = function(self, n) self.Age = self.Age+n end
    　　}
    　　print(t.Age) -- 27
    　　t.add(t, 10)
    　　print(t.Age) -- 37
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不过，t.add(t,10) 这一句实在是有点土对吧？没关系，在Lua中，你可以简写成：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;t:add(10) -- 相当于 t.add(t,10)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;实例&#34;&gt;实例&lt;/h5&gt;

&lt;p&gt;以下实例定义了函数 max()，参数为 num1, num2，用于比较两值的大小，并返回最大值：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    --[[ 函数返回两个值的最大值 --]]
    function max(num1, num2)
    
       if (num1 &amp;gt; num2) then
          result = num1;
       else
          result = num2;
       end

       return result; 
    end
    -- 调用函数
    print(&amp;quot;两值比较最大值为 &amp;quot;,max(10,4))
    print(&amp;quot;两值比较最大值为 &amp;quot;,max(5,6))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上代码执行结果为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;两值比较最大值为     10
两值比较最大值为     6
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>奇幻故事里的“法力者们”</title>
      <link>http://goblinlaboratory.win/post/%E5%A5%87%E5%B9%BB%E6%95%85%E4%BA%8B%E9%87%8C%E7%9A%84%E2%80%9C%E6%B3%95%E5%8A%9B%E8%80%85%E4%BB%AC%E2%80%9D/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/%E5%A5%87%E5%B9%BB%E6%95%85%E4%BA%8B%E9%87%8C%E7%9A%84%E2%80%9C%E6%B3%95%E5%8A%9B%E8%80%85%E4%BB%AC%E2%80%9D/</guid>
      <description>&lt;p&gt;介绍一下这些神话和奇幻故事里的“法力者们”。&lt;/p&gt;

&lt;h2 id=&#34;统称的魔法师们之witch&#34;&gt;统称的魔法师们之Witch　　&lt;/h2&gt;

&lt;p&gt;在这里，我们先说说一般意义上的“魔法师”，在很多游戏里，下列这些人物的名字都被翻译为“魔法师”，这种笼统的称呼有欠精确，因为其中的每一种“魔法师”都有自己鲜明的特色。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;1-witch&#34;&gt;1、Witch&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-女巫-巫婆-魔女&#34;&gt;一般译名：女巫、巫婆、魔女&lt;/h4&gt;

&lt;h5 id=&#34;关键字-邪恶-黑夜-魔鬼&#34;&gt;关键字：邪恶、黑夜、魔鬼&lt;/h5&gt;

&lt;h5 id=&#34;女巫的外号叫-魔鬼的情人&#34;&gt;女巫的外号叫“魔鬼的情人”　&lt;/h5&gt;

&lt;p&gt;虽然女巫在欧洲中世纪是知名度最高的魔法角色，可是在很多游戏里，我们常见到的并不是女巫，而是她的男性形式——Wizard（男巫），这两种人物都带有邪恶味道，女巫的标准造型是骑着穿着黑衣，骑根扫帚，而男巫则是长长的胡须，带着尖帽子。按照中文对“巫”字的贬义习惯，他们被统一称为“巫师”比较合适。与我们后面提到的Sorcerer（术士）不同，他们是在黑夜里活动的“夜巫”，而前者是“昼巫”，瞧，仅从活动时间来看，Wizard和Witch便更像反面人物……是的，我们可以找到可爱的Wizard（譬如说哈里·波特），以及可爱的Witch（譬如宫崎骏作品《魔女宅急便》里的小魔女KIKI），但这些都是现代人对他们的新诠释了。在中世纪的欧洲，巫师，尤其是女巫，是一种极其可怕的存在。头脑简单的贵族、教士和农民们传说着女巫们吃人肉、用咒语甚至与魔鬼交媾（她们因此得到一个外号——“魔鬼的情人”）的可怕场面，最后，这种恐惧发展到歇斯底里的状态：在整个欧洲展开了教会领导、全民参加的“猎巫运动”，无数被定为“女巫”罪名的女人被送上火刑架（其中有著名的“女巫”——圣女贞德）。中世纪的人们相信，女巫拥有邪恶的法术　　相比之下，男性的Wizard们的命运要好得多，即使在中世纪，他们也被认为和女巫有重大区别：他们不和魔鬼往来（我要是魔鬼，也只和女巫MM交往^__^），所以在人们的心目中，他们并不像女巫那般邪恶和具有危险性。于是，Wizard就慢慢演化成一个中性的单词了。在《指环王》里，著名的“正面人物”甘道夫就是一个Wizard。&lt;/p&gt;

&lt;h3 id=&#34;统称的魔法师们之sorcerer&#34;&gt;统称的魔法师们之Sorcerer&lt;/h3&gt;

&lt;h4 id=&#34;2-sorcerer&#34;&gt;2、Sorcerer&lt;/h4&gt;

&lt;h5 id=&#34;一般译名-术士&#34;&gt;一般译名：术士&lt;/h5&gt;

&lt;h5 id=&#34;关键字-智者-知识-炼金擅长炼金的术士也许是化学家的前身&#34;&gt;关键字：智者、知识、炼金擅长炼金的术士也许是化学家的前身　&lt;/h5&gt;

&lt;p&gt;不少游戏的职业翻译里，总是把Wizard和Sorcerer搞混。事实上，两者之间还是有不少区别的，Sorcerer带有更多智慧和知识的味道，虽然也拥有不可思议的力量，但魔力因素比较少，这使得他们看上去更像是中世纪的“科学家”，举个例子，最早的化学家——中世纪炼金术士就经常被称为“Sorcerer”，他们从超自然的力量里获取知识（在《美少女梦工场》游戏里，教授自然课程的老师便是一个炼金术士），而不像Wizard那样，借助暗黑的神秘主义和完全不可知的魔法。除了本源的文化差异，在“龙与地下城”的规则里，这两者的区别在于魔法的获得方式，Wizard需要通过研读魔法书、依靠记忆和升级来获得更多的魔法，但是Sorcerer的力量更多的来自于天赋，他们就像艺术家一样，与生俱来的拥有某种特质，施放魔法也不需要记忆。在中世纪，与巫师被拿来做烧烤的待遇天差地别，Sorcerer们常常是王公贵族的座上客，大人物们热衷于Sorcerer们擅长的炼金术。从这点来看，Sorcerer与中国古代历史上受到富贵阶级亲睐的炼丹术士非常类似，所以，将它翻译成“术士”是再好没有了。Sorcerer是一个男性术士专用的称谓，女术士被叫做“Sorceress”，不过，在欧洲神话中，这种女术士角色并非常少见，大概在中世纪的男权主义思想里，女人根本不配拥有与Sorcerer比肩的智慧吧。术士们从超自然的力量里获取知识，术士是知识和智慧的象征&lt;/p&gt;

&lt;h3 id=&#34;统称的魔法师们之mage-warlock-magician3&#34;&gt;统称的魔法师们之Mage&amp;amp;Warlock&amp;amp;Magician3&lt;/h3&gt;

&lt;h4 id=&#34;mage&#34;&gt;Mage&lt;/h4&gt;

&lt;h5 id=&#34;一般译名-法师-魔导士&#34;&gt;一般译名：法师、魔导士&lt;/h5&gt;

&lt;h5 id=&#34;关键字-博学-东方-贤者&#34;&gt;关键字：博学、东方、贤者&lt;/h5&gt;

&lt;h5 id=&#34;法师一般是睿智的-穿着长袍的白胡子老头&#34;&gt;法师一般是睿智的、穿着长袍的白胡子老头　&lt;/h5&gt;

&lt;p&gt;“法师”是不少游戏职业设定里对于使用魔法者的笼统称呼，Wizard和Sorcerer也常被写成“法师”，但笔者以为，真正够资格被称为“法师”的，唯有Mage。如果说Wizard是中性偏邪角色，Sorcerer是中性角色的话，那么Mage可是不折不扣的正面人物了，所以，拿带有褒义的“法”字来命名他们正合适。Mage们的标准造型是睿智的、穿着长袍的白胡子老头，与Sorcerer不同，他们不仅拥有知识上的博学，还拥有道德上的高尚，而且对于茫茫众生有引领、指导的力量。Mage有时也被写作Magi，原意是波斯拜火教的僧侣，在圣经故事里，当耶稣诞生在马厩里的时候，有三位来自于东方的贤人前来朝拜，献上祝福，他们就是Mage。从这点上来看，在教会统治下的中世纪欧洲，Mage们的形象理所当然要比Wizard和Sorcerer高大得多。所以，我们在“魔法门之英雄无敌”这样的游戏里看到，Mage住在光明的雪山城堡，属于正义的阵营。不过，在有些时候，Mage也被拿来做魔法师的统称，譬如我们在下一部分提到的专业的魔法师就叫“Special Mage”，所以看到邪恶的Mage也不用奇怪。&lt;/p&gt;

&lt;h3 id=&#34;4-warlock&#34;&gt;4、Warlock&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-妖术士&#34;&gt;一般译名：妖术士&lt;/h4&gt;

&lt;h5 id=&#34;关键字-邪恶魔法-召唤恶魔&#34;&gt;关键字：邪恶魔法、召唤恶魔&lt;/h5&gt;

&lt;h5 id=&#34;妖术士专指那些对于邪恶魔法感兴趣的魔法师&#34;&gt;妖术士专指那些对于邪恶魔法感兴趣的魔法师　&lt;/h5&gt;

&lt;p&gt;我注意到，在《魔兽世界》中，关于Warlock这个职业，在中国和韩国有不同的翻译。韩国人把它叫做“黑魔法师”，而中国人则称为“术士”。虽然都不尽准确，但是相比之下，前者更能体现Warlock的特点。从欧洲神话的渊源来看，Warlock专指那些对于邪恶魔法感兴趣的魔法师，而且与恶魔有着脱不开的干系。在一些介绍文章里提到Warlock能够召唤恶魔，但与其说“召唤”，不如说是“招请”，就像中国古代神话里的“请神”，因为在中世纪的神话里，恶魔不是Warlock的仆人，而是他们的主子，这个关系在《地下城守护者》的游戏中有体现，在地下城主豢养的各种打手里，就有被称为Warlock，穿着长袍，像个传教士的家伙。而在《魔域帝国》里，那个反派种族——莲族的最高魔法建筑也叫作“Warlock’s Tower”。所以，如果要将Warlock命名为“术士”的话，最好加上一个比较邪恶的前缀——“妖”术士。&lt;/p&gt;

&lt;h3 id=&#34;5-magician&#34;&gt;5、Magician&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-魔术师-奇术师&#34;&gt;一般译名：魔术师、奇术师&lt;/h4&gt;

&lt;h5 id=&#34;关键字-魔术-戏法&#34;&gt;关键字：魔术、戏法　　&lt;/h5&gt;

&lt;h5 id=&#34;在中世纪-magician是指那些变戏法的人&#34;&gt;在中世纪，Magician是指那些变戏法的人　　&lt;/h5&gt;

&lt;p&gt;在很多情况下，Magician也和Wizard和Sorcerer一样，被设计为游戏里“魔法师”类型职业的通称，例如在《无尽的任务》里，魔法师职业就叫Magician。不过，虽然有Magic（魔法）这个词做词根，但Magician在欧美神话体系里却并不是指那些真正拥有超自然魔力的人，而是凭借着障眼法和手脚快之类的小伎俩，让你造成错觉的人们，因此，把他们叫做“魔术师”是比较合适的。与前面所提到的那些或正或邪，法力强大的魔法师相比，Magician这个角色更可以被描绘成一个和平的、不具攻击性的普通人。&lt;/p&gt;

&lt;h2 id=&#34;专业的魔法师们之necromancer-illusionist-enchanter&#34;&gt;专业的魔法师们之Necromancer&amp;amp;Illusionist&amp;amp;Enchanter　　&lt;/h2&gt;

&lt;p&gt;俗话说，术业有专攻，魔法师们也不例外。除了前面第一部分说的统称的魔法师之外，还有一些专业魔法师称呼方式。在真实的历史中，有一些关于他们的事迹，但是完整的记载并不很多。这些职业魔法师成名的缘由，主要是因为“龙与地下城”规则里的所谓“八大魔法学派”，让他们成为了“博德之门”“无尽的任务”“魔兽世界”或者“魔法门”等欧美奇幻游戏里的常客。在他们当中，最有名的当属……&lt;/p&gt;

&lt;h3 id=&#34;1-necromancer&#34;&gt;1、Necromancer&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-死灵巫师&#34;&gt;一般译名：死灵巫师&lt;/h4&gt;

&lt;h5 id=&#34;关键字-死亡-鬼魂-死尸&#34;&gt;关键字：死亡、鬼魂、死尸&lt;/h5&gt;

&lt;h5 id=&#34;死灵巫师是最著名的-专业魔法师&#34;&gt;死灵巫师是最著名的“专业魔法师”　　&lt;/h5&gt;

&lt;p&gt;虽然各种劣质游戏翻译把法力职业们的名字搞得乱七八糟，但至少有一种角色的名字是绝不会弄错的，那就是Necromancer，因为他们的特征实在太明显了，刨坟掘墓，与死人和鬼魂打交道的死灵巫师注定是一个被所有人厌恶的存在。在一般游戏里，Necromancer的魔法包括召唤死灵、起死回生或者瞬间夺取人的灵魂等，他们总是有一堆骷髅兵木乃伊什么的充当喽啰，但实际上，最初的Necromancer把死人们弄活并不是为了找打架帮手，而是为了寻找宝藏。古代的人们相信，死人是无所不知的（因为鬼魂们老是没事瞎溜达？），所以，向被召唤来的鬼魂询问宝藏的埋藏地点通常能得到准确的指示。由于Necromancer的邪恶活动往往要毁掉尸体，即使召唤成功，也会给亡灵带来极大的痛苦，所以，对故人抱有尊重心态的老百姓对于他们的行为非常憎恨，于是，在前面说到的中世纪“猎巫运动”里，Necromancer也和女巫一样成了过街老鼠。与死人和鬼魂打交道的死灵巫师注定是一个被所有人厌恶的存在&lt;/p&gt;

&lt;h3 id=&#34;2-illusionist&#34;&gt;2、Illusionist&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-幻术师&#34;&gt;一般译名：幻术师&lt;/h4&gt;

&lt;h5 id=&#34;关键字-幻像-欺骗-虚假&#34;&gt;关键字：幻像、欺骗、虚假&lt;/h5&gt;

&lt;h5 id=&#34;幻术师的法术大都是制造幻象欺骗他人&#34;&gt;幻术师的法术大都是制造幻象欺骗他人　&lt;/h5&gt;

&lt;p&gt;在游戏里，幻术师（Illusionist）是一个不多见的职业，由于它的法术大都是制造幻象欺骗他人一类，从这点上看，他们与魔术师（Magician）比较接近。在“博德之门”、“无冬之夜”等游戏系列里，幻术师是作为法师系的一种而存在的，而在《魔法门之英雄无敌》里，如果英雄升级成为幻术师，就会在施展制造幻象魔法时获得额外的威力。&lt;/p&gt;

&lt;h3 id=&#34;3-enchanter&#34;&gt;3、Enchanter&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-附魔师&#34;&gt;一般译名：附魔师&lt;/h4&gt;

&lt;h5 id=&#34;关键字-操纵思想-魅惑-混乱&#34;&gt;关键字：操纵思想、魅惑、混乱&lt;/h5&gt;

&lt;h5 id=&#34;附魔师直接干预对手的思维和灵魂&#34;&gt;附魔师直接干预对手的思维和灵魂　&lt;/h5&gt;

&lt;p&gt;Enchanter与前面说到的幻术师最大的区别就在于他们不是制造外在的假相，而是直接干预对手的思维和灵魂（听起来更可怕，不是吗？）。《无尽的任务》里把它称为“幻术师”，显然不如“魔法门英雄无敌”和“冰风谷”里的称号“附魔师”来得准确，就像中国巫术里的“上身”或者“附身”一样，Enchanter控制了对象的头脑，让他们不是通过眼睛，而是自发的产生错觉，陷入混乱。女性的附魔师被叫做Enchantress。&lt;/p&gt;

&lt;h2 id=&#34;专业的魔法师们之abjurer-conjurer-diviner&#34;&gt;专业的魔法师们之Abjurer&amp;amp;Conjurer&amp;amp;Diviner&lt;/h2&gt;

&lt;h3 id=&#34;4-abjurer&#34;&gt;4、Abjurer&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-护法师&#34;&gt;一般译名：护法师&lt;/h4&gt;

&lt;h5 id=&#34;关键字-躲避-抵御-驱除伤害&#34;&gt;关键字：躲避、抵御、驱除伤害&lt;/h5&gt;

&lt;h5 id=&#34;为史实所罕见的护法师&#34;&gt;为史实所罕见的护法师　　&lt;/h5&gt;

&lt;p&gt;从名字上就可以看出来，这个职业的法师擅长防御方面的魔法，抵挡来自外界的攻击，或者驱走敌人等。需要指出的是，护法师并不具备治愈伤害的能力，他的魔法的作用在于通过防卫法术把伤害降低到最小程度，Abjurer一般只见于游戏，史实记载非常罕见。&lt;/p&gt;

&lt;h3 id=&#34;5-conjurer&#34;&gt;5、Conjurer&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-咒术师&#34;&gt;一般译名：咒术师&lt;/h4&gt;

&lt;h5 id=&#34;关键字-黑暗-诅咒-创造怪物&#34;&gt;关键字：黑暗、诅咒、创造怪物&lt;/h5&gt;

&lt;h5 id=&#34;印第安巫师被西方人列为-咒术师&#34;&gt;印第安巫师被西方人列为“咒术师”　　&lt;/h5&gt;

&lt;p&gt;在欧洲神秘学的词典里，Conjurer还有很浓的暗黑色彩，他们所掌握的法术，大都是以害人为目的。例如，在地理大发现时代，西方人在进入美洲以后，经常由于丛林的瘴疫而导致莫名其妙的死亡，他们认为这是印第安人的巫师在施展诅咒魔法，所以印第安巫师就被列入“Conjurer”了。由于“龙与地下城”的规则影响，在奇幻游戏里，Conjurer们又有了新的法力，这种驱使怪物的法力有时候被翻译成“召唤”，但是这种召唤与我们后面会提到的Summoner（召唤师）不同，Conjurer（咒术师）驱使的怪物由法师自己凭空，或者利用某种材质创造出来的，一种非生命的存在，而不是像Summoner那样召唤神魔或者野兽。&lt;/p&gt;

&lt;h3 id=&#34;6-diviner&#34;&gt;6、Diviner&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-先知-圣法师&#34;&gt;一般译名：先知、圣法师&lt;/h4&gt;

&lt;h5 id=&#34;关键字-神圣-智慧-预言&#34;&gt;关键字：神圣、智慧、预言&lt;/h5&gt;

&lt;h5 id=&#34;圣法师是与神密切相关的法术职业&#34;&gt;圣法师是与神密切相关的法术职业　&lt;/h5&gt;

&lt;p&gt;Diviner的词根是“Divine”（神的），所以，这是一个与神密切相关的法术职业。Diviner通常是拥有大智慧者，他们的工作是探求宇宙中隐含的大道，他们了解神灵给人世的谕示，能够预言未来，而躲在幕后不现身的神灵通过Diviner来向老百姓传达自己的旨意。因此，将他们成为“先知”和“圣法师”都比较符合其原本的含义。&lt;/p&gt;

&lt;h2 id=&#34;专业的魔法师们之invoker-transmuter-summoner&#34;&gt;专业的魔法师们之Invoker&amp;amp;Transmuter&amp;amp;Summoner&lt;/h2&gt;

&lt;h3 id=&#34;7-invoker&#34;&gt;7、Invoker&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-召唤师-祈求师-关键字-祈求-能量-自然&#34;&gt;一般译名：召唤师、祈求师 关键字：祈求、能量、自然&lt;/h4&gt;

&lt;h5 id=&#34;祈求师的法力在于召唤大自然的力量&#34;&gt;祈求师的法力在于召唤大自然的力量&lt;/h5&gt;

&lt;p&gt;Invoker的召唤对象是大自然的能量，他们利用风雪雷电等自然现象来为自己效力，很多奇幻游戏里大名鼎鼎的攻击魔法，都是他们的专长，例如火球术（fireball）、魔法箭（magic missile）等。很多翻译里把他们叫做“召唤师”，个人觉得不太准确，容易与召唤野兽鬼怪的召唤师搞混，而且，对于大自然力量的利用，在中文习惯里，一般使用“求”这个字，譬如说“求雨”。所以将Invoker们叫做“祈求师”更符合他们的身份和中文习惯。&lt;/p&gt;

&lt;h3 id=&#34;8-transmuter&#34;&gt;8、Transmuter&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-炼金师&#34;&gt;一般译名：炼金师&lt;/h4&gt;

&lt;h5 id=&#34;关键字-转化-质变-变异&#34;&gt;关键字：转化、质变、变异&lt;/h5&gt;

&lt;p&gt;如果要给Transmuter起个比较现代化的名字，可以管他们叫“物质能量转化工程师”什么的，因为他们擅长往物体或者生物里灌输魔法能源，使得后者发生“质的变化”，变成另外一种状态，有时候，我们熟悉的所谓“变身”也是Transmuter的拿手好戏。目前，对于Transmuter并没有太好的译名，用“炼金师”来称呼他们过于片面，因为炼金只涉及到普通物质的变化，而对于生物和能量的转化却并不包括。&lt;/p&gt;

&lt;h3 id=&#34;9-summoner&#34;&gt;9、Summoner&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-召唤师-召唤者&#34;&gt;一般译名：召唤师、召唤者&lt;/h4&gt;

&lt;h5 id=&#34;关键字-召唤-野兽-神魔&#34;&gt;关键字：召唤、野兽、神魔&lt;/h5&gt;

&lt;h5 id=&#34;高级召唤者甚至能役使神魔&#34;&gt;高级召唤者甚至能役使神魔　&lt;/h5&gt;

&lt;p&gt;在“龙与地下城八大魔法学派”里，Summoner和前面说到的Conjurer（咒术师）一般是放在一起的，属于召唤门派的两个分支。但由于Summoner在很多欧洲神话里，是一种独立的法术职业存在，所以我们把它单拿出来介绍，Summoner的特点就是其法术本身并不具备攻击力，而是能召唤出强力的生物帮助他战斗。低级的Summoner可以召唤出飞禽走兽、山精树怪之类，而高级者甚至能役使神魔。在游戏方面，我们也曾玩到过一款名为《召唤者》（Summoner）的动作RPG。&lt;/p&gt;

&lt;h2 id=&#34;著名的异民族魔法师之shaman-druid&#34;&gt;著名的异民族魔法师之Shaman&amp;amp;Druid　&lt;/h2&gt;

&lt;p&gt;除了前两个部分的魔法师外，我们还能在游戏里看到一些蛮族魔法师，他们在各种设定上和其他魔法师们有很大区别，这是因为在真实的历史文化里，他们就属于那些主流世界以外的异民族文化。&lt;/p&gt;

&lt;h3 id=&#34;1-shaman&#34;&gt;1、Shaman&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-萨满-巫医&#34;&gt;一般译名：萨满、巫医&lt;/h4&gt;

&lt;h5 id=&#34;关键字-野蛮-原始-自然&#34;&gt;关键字：野蛮、原始、自然&lt;/h5&gt;

&lt;h5 id=&#34;萨满是原始民族法力者的专用称呼&#34;&gt;萨满是原始民族法力者的专用称呼　&lt;/h5&gt;

&lt;p&gt;萨满教是一种原始的宗教，它非常神奇的分布在全球的许多北方民族中，从北亚、中北欧到北美的广袤地区，你可以从相隔数千里的两个从未相互接触过的民族中看到同样的萨满习俗。萨满教崇拜各种各样的自然现象，从风雪雷电到动物植物。萨满（Shaman）是萨满教里的法力者总称，由于信奉萨满教的民族一般开化较晚，相对落后，所以，在奇幻体系里，Shaman是原始民族法力者的专用称呼，例如《魔兽世界》和《天堂》里的兽人族法师都叫Shaman。Shaman是一个中性的魔法职业者，由于他们所处的文化很落后，而且崇拜自然万物，因此，在魔法方面Shaman也是擅长一些利用自然界力量的法术。在近现代，由于某些欧洲人的无知和歧视，在很多人文题材著作里，所谓他们认为“不开化”的亚非拉民族的魔法职业者都是“萨满”，笔者在一本书中看到，中国的道士居然被命名为“Chinese Shaman”，不仅哑然失笑&lt;/p&gt;

&lt;h3 id=&#34;2-druid&#34;&gt;2、Druid&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-德鲁伊&#34;&gt;一般译名：德鲁伊&lt;/h4&gt;

&lt;h5 id=&#34;关键字-森林-医术-祭祀&#34;&gt;关键字：森林、医术、祭祀&lt;/h5&gt;

&lt;h5 id=&#34;德鲁伊教徒居住在森林里-与自然亲近&#34;&gt;德鲁伊教徒居住在森林里，与自然亲近　&lt;/h5&gt;

&lt;p&gt;德鲁伊教凯尔特人于公元前 1500 年左右迁入中欧，公元前5世纪至公元1世纪时进驻西欧，德鲁伊教就是他们的信仰。德鲁伊（Druid）一词，可理解为“了解橡树的人”，或“智者”、“男巫”。&lt;/p&gt;

&lt;p&gt;德鲁伊属于凯尔特人中的特权阶级，是部落的支配者、王室顾问、神的代言人，地位极尊；只要他们出面调停，即便是处于交战状态的两个部族也必须偃旗息鼓，坐下来谈判。另外德鲁伊还担负着主持祭祀，解释教法，传授知识，仲裁纠纷，医治病痛，探求哲学等诸多责任。罗马人的著作中也记载了很多德鲁伊教徒献祭活人的故事。但当年的罗马人自以为是文明的中心，且正陷入与高卢人的战争，记述的客观性难免要大打折扣。（图“1815年绘制的德鲁伊教团在巨石阵举行祭祀想象图”）　　德鲁伊宗教敬拜自然，并将橡树视作至高神祗的象征，他们把寄生在橡树上的槲寄生看作一种万灵丹（panacea），认为它具有神圣的疗效。因此这种圣果也就需要通过特别的仪式才可采集，据说只有在满月和新月的日子，或者每月的第六个夜晚，才能举行这种仪式。（图大德鲁伊）此时要由大德鲁伊（Arch-Druid）身披白袍、佩戴黄金首饰，手持黄金镰刀上树割取。这种仪式充分体现了德鲁伊宗教对于自然力量的崇拜。&lt;/p&gt;

&lt;p&gt;德鲁伊教在不列颠的母系社会时代就已存在。但经过与罗马人的战争，以及基督教的极力打压。公元6世纪到16世纪这千年中，很多德鲁伊教的传统渐渐融入人们的日常生活，甚至被基督教吸收消化，但教团本身却已销声匿迹。直到16世纪，随着早期德鲁伊宗教研究著作的翻译和印刷传播，欧洲人开始意识到他们的祖先并非愚昧无知的野蛮人，“德鲁伊教复兴”运动才逐步展开。时至今日，已有数个德鲁伊团体（Order）活跃在世界各地，他们将环保主义和泛爱主义融合到自己的信仰中，使这个根植于古老传统的神秘宗教焕发出了前所未有的清新与活力。&lt;/p&gt;

&lt;p&gt;解读德鲁伊教的几个关键词：　&lt;/p&gt;

&lt;p&gt;巴德、奥瓦德和德鲁伊　　古希腊地理学家斯特雷波曾说过“在所有高卢人中，有三个集团受到了特别的尊重：巴德（Bards，即吟游诗人）、奥瓦德（Ovates）和德鲁伊”。其实这三个担负着不同责任的团体都属于德鲁伊教团，被统称为德鲁伊教徒。（图巴德）　　巴德是传统的守护者，诗人和歌手，也是神圣文字的管理者，一个合格的巴德要熟记数百首诗歌，以及每位神祗和英雄的家世、功业，修习时间约为12年。　　奥瓦德的职责是预言和占卜，他们要越过时间的河流预言未来，也要穿行在死亡的领域与先人交谈把警示和预兆带给生者。另外自然哲学和医术也是奥瓦德重要的修习内容。　　德鲁伊则是国王的顾问、法官、教师、哲学家和主祭等等，他们袍色为白，因为白色象征着纯洁和太阳，在德鲁伊教中是神圣的颜色，要想成为一个合格的德鲁伊，大概需要学习20年的时间。&lt;/p&gt;

&lt;p&gt;八分历法：　　德鲁伊将一年分为八等份，在每段时间的结束或者说是开始处都会有一个节日。在这样的日子里他们会举办祭祀活动，以示庆祝。另外他们还将一年的时光轮转，四季变迁看作人的一生，每段时间都代表着人生的某个阶段。　　在这八个节日里，最重要也是最广为人知的就要算十月一日的邵恩（Samhain）节了。Samhain字面的意思是“温暖季节的结束”，同时它也是凯尔特神话中死神的名字。在德鲁伊的历法中，十月一日即是新年，又是“亡者飨宴”的日子，此时尘世与其他世界的壁垒最容易被穿越，所以死者的灵魂会在傍晚时回到他们原来的家。在这天，凯尔特人会身着兽皮外袍，头戴兽头游行；而孩子们则会扮成精灵（Faeries）的样子，逐家逐户去恳求食物——如果谁不给予精灵崇拜及食物，这些精灵就会捉弄他们。这个节日就是日后万圣节的原型。(图万圣节)　　自然崇拜和巨石阵：　　德鲁伊教信仰包括日月崇拜、火焰崇拜、巨石崇拜、树木崇拜、动物崇拜等等。德鲁伊崇尚自然，倡导与自然生命融为一体；据说他们可以召唤飞禽走兽，甚至将自己转化为熊、乌鸦等动物的形态——这也是如今众多奇幻游戏中德鲁伊形象的由来。&lt;/p&gt;

&lt;p&gt;德鲁伊通常不建造殿堂，宗教祭祀活动全部在未经采伐的橡树林中举行。有人认为现今英格兰、爱尔兰等地的巨石阵（Stonehenge）遗迹便是德鲁伊进行太阳祭祀的场所。(图“现存最大的巨石阵”)关于巨石阵最早的记载见于亚瑟王故事的《圣杯传奇》中，书中记载了巫师梅林（Merlin）吟唱了魔法，从爱尔兰呼唤巨大的石头，一夜之间建成了巨石阵的故事。不过据考证，“梅林”一词最初就是泛指那些精通诗之艺、视之艺（占卜）的德鲁伊教巫师们。　&lt;/p&gt;

&lt;p&gt;欧延（Ogham）文字：&lt;/p&gt;

&lt;p&gt;德鲁伊教虽然禁止把教义、密仪书写出来，但他们也有着自己的文字符号——欧延文字。这种文字常见于凯尔特石刻、木刻之中，一共有25个字母（也有人说为20个），每个字母都与一种圣树相关。据说德鲁伊会将这些树型字符刻在木杖上，用以占卜。（图“ogham字母表”）　　关于欧延文字还有一种说法，认为它是由十三个字母组成历法表，每个字母代表一个月份——凯尔特历法一年13个月，每月28天。当然，这些月份也多是由树木&lt;/p&gt;

&lt;h2 id=&#34;命名的附篇-神职者们-priests-cleric-monk&#34;&gt;命名的附篇：神职者们（Priests&amp;amp;Cleric&amp;amp;Monk)　&lt;/h2&gt;

&lt;p&gt;虽然准确的来说，神职者们不属于“魔法师”的范畴，而是属于牧师系（或者叫僧侣系），不过，他们治病救人的法力也是游戏中不可或缺的力量。在神职者中，有几个职业常被混淆误用，我们在这里简要区分一下：&lt;/p&gt;

&lt;h3 id=&#34;1-priests&#34;&gt;1、Priests&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-神父-牧师-祭司&#34;&gt;一般译名：神父、牧师、祭司&lt;/h4&gt;

&lt;h5 id=&#34;关键字-正义-护佑-治疗&#34;&gt;关键字：正义、护佑、治疗&lt;/h5&gt;

&lt;h5 id=&#34;游戏中被戏称为-奶牛-的牧师&#34;&gt;游戏中被戏称为“奶牛”的牧师　&lt;/h5&gt;

&lt;p&gt;在大多数的网络游戏里，能“加血”的人一般都叫Priests，这个单词大家也是耳熟能详了。按照天主教的解释，他们是神与人之间的桥梁，负责举行祭祀、施行圣事、代天主祝福人民，绝大多数情况下为男性。除了这个解释外，有些其他宗教里的重要神职人员也被称为Priests（例如埃及和希腊神话里的祭司），和牧师一样，祭司们也负责着代表人民与各自的神祗沟通，并把神祗的指令传达给俗世的责任。在一些游戏里，还有邪教的祭司，被称为“黑祭司”（Dark Priests或者Black Priests）。&lt;/p&gt;

&lt;h3 id=&#34;2-cleric&#34;&gt;2、Cleric&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-圣职者-神职者-传教士&#34;&gt;一般译名：圣职者、神职者、传教士&lt;/h4&gt;

&lt;h5 id=&#34;关键字-圣职-神职-为主服务的人&#34;&gt;关键字：圣职、神职“为主服务的人”　　&lt;/h5&gt;

&lt;p&gt;在很多时候，我们会看见游戏职业分类里把Cleric列为牧师（Priests）职业系下的一个子职业，这恰好把两者的关系给弄反了，Cleric的词根是“clergy”，意思是“为主服务的人”，也就是所有的任何形式的圣职和神职人员，从至高的教皇到普通的修士修女，甚至为教会而战的武士也可以算做Cleric，当然其中也包括我们前面说到的牧师（Priests）。因此，确切的说，牧师是Cleric的一种，而不是相反。&lt;/p&gt;

&lt;h3 id=&#34;3-monk&#34;&gt;3、Monk&lt;/h3&gt;

&lt;h4 id=&#34;一般译名-僧侣-隐修士&#34;&gt;一般译名：僧侣、隐修士&lt;/h4&gt;

&lt;h5 id=&#34;关键字-隐士-修行-救恕&#34;&gt;关键字：隐士、修行、救恕&lt;/h5&gt;

&lt;h5 id=&#34;隐居山林的僧侣&#34;&gt;隐居山林的僧侣　　&lt;/h5&gt;

&lt;p&gt;由于我们的游戏广泛的涉猎东西文化，所以在设定上，Monk这个职业表现得尤为乱七八糟，不少游戏将东方的和尚和西方的隐修士混为一谈，甚至让隐修士们也像少林和尚般武功不凡，真是叫人哭笑不得。Monk在欧洲宗教和神话里指那些抛弃俗世生活，隐居山林，通过吃苦受罪寻求神的救恕的那样一群人，虽然他们与东方的僧人在生活方式上有些相似，但这个称谓是在西方了解佛教以前就诞生了，所以拿它来称呼东方和尚只是借用而已，事实上隐修士和和尚根本不是同一类人，Monk也不是某些游戏介绍里说的“带有东方色彩”的奇幻职业种类&lt;/p&gt;

&lt;h2 id=&#34;wizard-魔法师&#34;&gt;wizard 魔法师&lt;/h2&gt;

&lt;p&gt;此类职业也被人称作圣人及奇术师，选择这个方向的话，需要多才多艺以及相当渊博的学识，各位的选修课大概还得再加上七八门。代表人物为挪威那四个到处折腾得天翻地覆却始终不露脸家伙。&lt;/p&gt;

&lt;p&gt;姑且我们可以把wizard作为一个模板。相比较之下的，其他分支职业虽然通常也有被叫做魔法师或者巫师的时候，我们只讲一些不同的特色之处。&lt;/p&gt;

&lt;h2 id=&#34;witch-女巫&#34;&gt;witch 女巫&lt;/h2&gt;

&lt;p&gt;女性学员限定职业，说起特色嘛，就是骑扫把。通常看到骑着扫把飞来飞去的十有八九就是女巫了，没什么好说的，各位同学注意飞之前在裙下施放不可视咒防走光就好。就业方向嘛~大多数学员都去了霍格沃兹那个位面，毕竟那个世界中几乎所有施法者都是witch / wizard，所谓男巫女巫的天堂。代表人物是如今名声在外的赫敏·简·格兰杰&lt;/p&gt;

&lt;h2 id=&#34;witcher-巫师&#34;&gt;witcher 巫师&lt;/h2&gt;

&lt;p&gt;狩魔猎人从前也只是不太有特色的魔法师中的一种，不过自从“白狼&amp;rdquo;杰洛特出名之后基本上就特指狩魔猎人这种职业了。“有念咒的时间我早就把你砍成肉泥了&amp;rdquo;狩魔猎人就是秉持这种信念行走于世的战斗法师，或者也有在某些文化中被称作魔剑士之类的。不过分依赖法术，在修炼个人意志力的同时也严格磨练着武器的使用方法。一旦发生战斗，在极近距离内拥有相当高的生存能力。代表人物是来自波兰的“白狼&amp;rdquo;杰洛特&lt;/p&gt;

&lt;p&gt;## witches是witch的复数 或指 巫婆 魔女&lt;/p&gt;

&lt;p&gt;女同学们，要当就当魔女吧，真的。这是一条艰辛却迈向成功之路，在大多数位面中，witch都是被大众恐惧和排斥的群体，所以能称得上魔女的人都是些非常厉害的家伙们，因为那些没有真才实学的女巫们统统都被群众们抓起来烧死了，恩恩。说到这一会领这张表走的女同学们可以去魔药管理处领一瓶火抗药剂，祝你们好运。代表人物是来自欧洲能操纵头发召唤异界魔兽的魔女贝优妮塔。&lt;/p&gt;

&lt;p&gt;泛用职业说完了，咱们接下来讲讲专业分化的特型职业们&lt;/p&gt;

&lt;p&gt;## magician 魔术师&lt;/p&gt;

&lt;p&gt;变戏法者关于magician我们最常说最基本的是什么？那边那位巫师回答一下?……哦，你是扫地的。咳被称作魔术专业圣典的《障眼法》中这样说道“魔术都是骗人的”所以各位魔法资质平平的学员们推荐选择这条职业道路，当然了，磨练魔术技巧和手法也不是一件轻松的事情，而且以这种职业面貌是唯一可以去进军低魔位面甚至无魔位面这种对我们施法者不太友好的世界的方法。从今以后你们将与鸽子、兔子以及高筒礼帽为伴。另外在低魔甚至无魔位面中没有我们的施法者协会这样的机构，大家过去后找叫做“娱乐圈”的地方碰头。&lt;/p&gt;

&lt;p&gt;## warlock 术士&lt;/p&gt;

&lt;p&gt;妖术师我知道大多数选择来做术士的男同学们都是因为魅魔吧&lt;/p&gt;

&lt;p&gt;但我们反复强调的是，作为使用黑暗系法术也就是世俗称之为邪恶法术的术士，不论是吸取生命、操弄灵魂、诅咒、召唤恶魔这类技巧都是可以运用在正途的，正所谓没有邪恶的工具只有邪恶的使用者。另外，尽管操纵异界来的恶魔十分便利，但时刻得警惕这些狡诈的生物，不要被他们的花言巧语扰乱了自己的心智，尤其是魅魔！尤其是魅魔！尤其是魅魔！重要的事情说三遍&lt;/p&gt;

&lt;p&gt;## Cleric 牧师&lt;/p&gt;

&lt;p&gt;牧师作为守序阵营的代表之一，在不同的位面中分别信仰不同的代表光明、正义、希望的神祇，并借此为他人提供祝福、治愈的服务。在一些低魔位面中，需要上战场或者外出冒险的牧师通常会携带钝器来提供近程防身保障，连武器都挑选不易致死的钝器，真是充满了慈悲呀。&lt;/p&gt;

&lt;p&gt;## Mage 魔导士&lt;/p&gt;

&lt;p&gt;在如今这个时代，通常我们说到mage，比较特指的是来自东瀛文化中的西式法师（好绕）。mage可以说是自成一派，在这种体系中个人的力量是无法学会所有法术的，所以在mage之下还含有数种特性化的职业分工，例如专司治愈以及祝福的white mage白魔导士、专精各种元素伤害型的black mage黑魔导士、同时能使用低阶黑白魔法以及具备一定程度近战技巧的多面手red mage赤魔导士、学习并使用魔物技能的青魔导士、不知道会干嘛的绿魔导士、以及操纵时间的时魔导士、使用禁术的里魔导士等等&lt;/p&gt;

&lt;p&gt;## Shaman 萨满&lt;/p&gt;

&lt;p&gt;萨满必备三技能，刻图腾、跳舞、大声吆喝，会了这三招就够了。浅显易学上岗快，缺点就是挺费体力的，干的都是体力活。另外请信仰当地的部族教义，相信大地之神和自己的灵魂互相的交流。每天睡前和早起都默念萨满业的宗旨“大地母亲在忽悠着你”代表人物萨尔&lt;/p&gt;

&lt;p&gt;## Druid 德鲁伊&lt;/p&gt;

&lt;p&gt;德鲁伊算得上是施法者中的隐士，你们需要住在山林之中，与自然为伴，信仰自然之灵，借助大自然的力量保护生态的平衡。乌鸦、狼、树人甚至藤蔓都是你阻止偷猎者的帮手。高等的德鲁伊甚至自己就能化身为狼、鹿、熊等生物，真正的做到与自然融为一体。相传亚瑟王时期的梅林就是一位德鲁伊，“梅林”一词最早就指那些拿着橡木杖，信仰德鲁伊教的巫师们。&lt;/p&gt;

&lt;p&gt;## Voodoo 巫毒&lt;/p&gt;

&lt;p&gt;首先高级的巫毒们需要一定程度的裁缝技巧，毕竟你们施法用的巫毒娃娃都是得自己手工做的，要是实在做得太萌或者毛茸茸的，可别怪我不让你们毕业，咱可丢不起这个人。其次，信仰鬼神以及制作符咒和缩制人头什么的都无所谓，说到底都是生活技能，不用有心理负担，反正也没人真的把魔鬼召唤出来过，对了你们的心理学都必须考A才能过关。上一届毕业生给他们改名叫巫医统统派去了崔斯特姆，据说还挺受人待见的。&lt;/p&gt;

&lt;p&gt;## Necromancer 亡灵巫师&lt;/p&gt;

&lt;p&gt;亡灵巫师、或者叫死灵法师，专精于 把死尸或者骷髅回收再利用这一环保行业，同时也是最抠门最无情的包工头子们。虽然大家都觉得干这一行身上脏脏臭臭的，大半辈子都有轰不完的苍蝇什么的，但无疑确实是最舒适的职业之一，只要你鼻子不太好使，完全可以当自己是贵族，让一大帮子僵尸和骷髅照顾你的衣食住行。&lt;/p&gt;

&lt;h2 id=&#34;lich-巫妖&#34;&gt;Lich 巫妖&lt;/h2&gt;

&lt;p&gt;极少的死灵法师出于对亡灵魔法的好奇和钻研心（或者是怕死），最终能钻研出让自己转生成不朽不死的亡灵大法师的方法，抛弃肉体的束缚后不用再担心吃喝拉撒，可以更无所顾忌的宅了，恩，想要此生能看到全职猎人大结局就靠这个了。&lt;/p&gt;

&lt;p&gt;再继续精分下去就是一些低魔位面中的细分化职业了，在那些世界中只要掌握一样技巧就足够你找工作，来来，学习成绩不好的同学别睡了，快点看这里。&lt;/p&gt;

&lt;h2 id=&#34;illusionist-幻术师&#34;&gt;Illusionist 幻术师&lt;/h2&gt;

&lt;p&gt;精通制造幻觉或幻术的施法者、主要技巧是制造分身幻影、障眼迷雾、看起来是墙，实际是通道的假墙等等，不论是冒险者小队还是城堡、别墅的施工队，都有你的一席之地。Enchanter 附魔师专职为武器、护甲、首饰等进行附魔的职业，只要去找一个冒险者比较多的城镇，不用自己出去冒险，就保证能让你挣得盆满钵满。什么？成本？让他们自带材料！&lt;/p&gt;

&lt;h2 id=&#34;conjurer-咒术师&#34;&gt;Conjurer 咒术师&lt;/h2&gt;

&lt;p&gt;专门下诅咒的职业，你可以给书本或者戒指、武器、保险箱上下诅咒什么的，大部分咒术师都受雇去干下咒要人命那种肮脏的交易了，要我说大可不必，一看你们市场学就没念好，可以主动来创造些不违法乱纪的相对温和的市场需求嘛。&lt;/p&gt;

&lt;h2 id=&#34;abjurer-护发师&#34;&gt;Abjurer 护发师&lt;/h2&gt;

&lt;p&gt;额，不对，是护法师，专职躲避、抵御、驱除伤害，你们刚好可以两两组队，一个咒术师到处去下诅咒、另一个护法师收钱解除。缺钱花的时候不管三七二十一上街抓住一个人就跟他说“小伙子！我看你印堂发黑呀！”&lt;/p&gt;

&lt;h2 id=&#34;diviner-先知&#34;&gt;Diviner 先知&lt;/h2&gt;

&lt;p&gt;预言家预言是门深奥的学问不要小看，胡蒙的话容易被烧死。天文和地理可以帮助你预言气象、市场和经济可以帮你预言市场的走势、心理学和PUA可以帮你预言个人情感等等，这可都是实打实的知识才行。对了，一会你们也可以去领一瓶火抗药剂。&lt;/p&gt;

&lt;h2 id=&#34;invoker-祈求师&#34;&gt;Invoker 祈求师&lt;/h2&gt;

&lt;p&gt;出席祭祀啦、祈雨、红白喜事什么的都缺不了你，当然了你得挑选文化进度不要太先进的世界才好找工作，但是也不能傻了吧唧找些太原始的文明，不然没准你刚忙活完人家就把你剥光扔锅里炖了。&lt;/p&gt;

&lt;h2 id=&#34;transmuter-炼金师&#34;&gt;Transmuter 炼金师&lt;/h2&gt;

&lt;p&gt;提到炼金师大家一辈子都得记住这世间唯一不变的真理、最为可靠并且无法动摇的法则就是“等价交换”，虽然叫做“炼金”，别再试着把便宜的金属变成金子，无数前人的经验告诉我们，成本收不回来的。你们就老老实实的做药水卖钱就够衣食无忧了。什么？你说贤者之石？那玩意是骗人的。&lt;/p&gt;

&lt;h2 id=&#34;summoner-召唤师&#34;&gt;Summoner 召唤师&lt;/h2&gt;

&lt;p&gt;喜欢小动物？尤其喜欢异世界的？那就做召唤师吧，各种各样的可爱或者恶心的生物等着被你们召唤到身边来，当然异界生物学得好好背得滚瓜烂熟才行，你把火元素直接召唤到水里或者招来不呼吸氧气的生物什么的完全就是作死，异界生物保护协会会告你的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>法师,巫师,术士,死灵法师,萨满祭司</title>
      <link>http://goblinlaboratory.win/post/%E6%B3%95%E5%B8%88,%E5%B7%AB%E5%B8%88,%E6%9C%AF%E5%A3%AB,%E6%AD%BB%E7%81%B5%E6%B3%95%E5%B8%88,%E8%90%A8%E6%BB%A1%E7%A5%AD%E5%8F%B8/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/%E6%B3%95%E5%B8%88,%E5%B7%AB%E5%B8%88,%E6%9C%AF%E5%A3%AB,%E6%AD%BB%E7%81%B5%E6%B3%95%E5%B8%88,%E8%90%A8%E6%BB%A1%E7%A5%AD%E5%8F%B8/</guid>
      <description>&lt;h3 id=&#34;法师&#34;&gt;法师：&lt;/h3&gt;

&lt;h4 id=&#34;魔法-就是知识本身法师是神秘侧的科学家&#34;&gt;——“魔法”就是知识本身法师是神秘侧的科学家。&lt;/h4&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;法师的力量源自对”神秘“的学习与钻研。法术在法师眼里是如同数学或物理一样，从基础理论到实际应用，严谨而不断进步的科学。法师们通过自己的逻辑与理论来解释他们的世界，并通过学习掌握改变世界的力量。&lt;/p&gt;

&lt;p&gt;法师理解一个法术先于施放这个法术，他们知道如何用咒语与手势编织法术的构架，也明白精神的信标如何引导虚空中的魔能。法师们学习法术的目的多种多样，复仇、变强、抑或是见识更加广阔的世界，但探寻未知的冲动与认识世界的快感才是一名法师向伟大前进的动力。&lt;/p&gt;

&lt;p&gt;法师们谨慎而乐观地对待自己的力量，并将其视为在探求神秘的道路上保护自己的工具。法师的存在往往伴随着一个意象——法师塔法师塔在凡人的眼中是一个神秘的冥想室，是可怕的战争堡垒，充斥着法术陷阱、傀儡护卫、秘法卷轴、法术书以及来自诸宇宙难以名状的财宝。这些想象都对，也都错了。&lt;/p&gt;

&lt;p&gt;一名法师在自己的法师塔里才是完全自由的。&lt;/p&gt;

&lt;p&gt;他可以召唤九层地狱的恶魔，与七重天堂的天使交谈，将心灵送往星界，抑或是创造永恒的炽阳。他能够一遍遍地尝试复现古老卷轴记载模糊的法术，也可以将自己最疯狂的创想变成现实。法师塔是法师的实验室，从开始到终极都是。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;【法师靠着苦读钻研来学习魔法。他们翻阅发霉的古老卷册，与其他法师辩论魔法理论，并且不断练习施法。对法师来说，魔法不是天份，而是努力习得的技艺。】【法师的力量就是魔法，其他都是次要的。法师透过实验和经验学习新法术，有时也可能向其他法师学习。除了学习新法术之外，法师也会复习已知法术，使其更加精进。】
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在游戏中作为可操控角色通常指元素法师与奥术法师代表法术：塑能法术（火球术、闪电束、魔法飞弹）其他法术：防护（魔法盾）、变化（变羊）、咒法（元素召唤、传送）&lt;/p&gt;

&lt;h3 id=&#34;巫师&#34;&gt;巫师&lt;/h3&gt;

&lt;h4 id=&#34;哲人与守秘者&#34;&gt;——哲人与守秘者&lt;/h4&gt;

&lt;h4 id=&#34;由巫师到法师-犹如由毕达哥拉斯到牛顿-由法拉第到麦克斯韦&#34;&gt;由巫师到法师，犹如由毕达哥拉斯到牛顿，由法拉第到麦克斯韦&lt;/h4&gt;

&lt;p&gt;巫师们，或许应该说最早的法师，他们最早地接触了神秘，并找到了使用这种力量的方法。巫师很难与法师或术士区分开，因为巫师与术士一样需要天赋，和法师一样需要学习。&lt;/p&gt;

&lt;p&gt;如果说法师是魔法世界的现代数学家、物理学家、化学家、生物学家&amp;hellip;&amp;hellip;，巫师则是哲学家，尚处在那个科学与哲学尚未分家的年代巫师：“’&amp;hellip;&amp;hellip;孩子，看着你的手心，跟着我念：‘美多罗阿&amp;hellip;’没关系，不要害怕，这团火焰不会灼伤你”&lt;/p&gt;

&lt;p&gt;法师：“塑能系法术是最简单而粗暴的：通过精神力结合咒文、手势引导内魔力池的魔力构建法术模型；引导外界的游离魔能进行填充，同时锁定你的目标；最后通过开关指令来激发整个法术”&lt;/p&gt;

&lt;p&gt;巫师：”我的孩子，这个法术原本可以举起整座山脉，虽然丢失了一小半的咒文，但现在依然可以让大地颤抖“&lt;/p&gt;

&lt;p&gt;法师：”这个地震术由传奇法术天变地异经过四次简化而来，一名银月法师或三名晨星法师组成的法术阵列就可以发动，在攻城战中效果非常优秀“&lt;/p&gt;

&lt;p&gt;巫师：“这个法术对手势与发音都有严格的要求，错一个音调就会让你的脑浆从鼻孔里流出来”&lt;/p&gt;

&lt;p&gt;法师：“当你的精神力强度足以打开α阀，就可以进行法术强效的尝试，效果视你的精神强度与持续时间而定。进一步地，当你的精神进入σ域，同时计算能力超过组建δ构型的最低要求，就可以将三级以下的法术释放压缩在一个自由动作内，没错，这就是你们梦寐以求的法术瞬发”&lt;/p&gt;

&lt;p&gt;巫师的法术通常比法师多而杂，他们更适应生活、享受生活，而非研究或者战斗。&lt;/p&gt;

&lt;p&gt;法师们乐意为追求知识的人打开神秘的大门，而巫师对此的态度更加谨慎。巫师的活动与传承比法师更加秘密。代表法术：咒法、预言、附魔、变化、幻术游戏中巫师一般不作为可用角色，而是主角的导师或指引者&lt;/p&gt;

&lt;h3 id=&#34;术士&#34;&gt;术士&lt;/h3&gt;

&lt;h4 id=&#34;驾驭你的力量-不要被他吞噬&#34;&gt;——驾驭你的力量，不要被他吞噬&lt;/h4&gt;

&lt;p&gt;术士们的力量来源于超自然的天赋，八分之一巨龙的血脉，或者一份与混沌邪祟的契约；&lt;/p&gt;

&lt;p&gt;术士”发掘“自己的力量更甚于”学习“，他们”使用“这份力量而非”理解“。&lt;/p&gt;

&lt;p&gt;法师与巫师是学者，那么术士更偏向于战士。术士的力量往往是强大而难以驾驭的。&lt;/p&gt;

&lt;p&gt;游戏中的术士是通常是”术士“、”邪术士“、”邪神牧师“的混合，&lt;/p&gt;

&lt;h4 id=&#34;术士们的力量往往联系着暗影-邪能与混沌-制造痛苦与死亡-并以鲜血和灵魂作为代价&#34;&gt;术士们的力量往往联系着暗影、邪能与混沌，制造痛苦与死亡，并以鲜血和灵魂作为代价。&lt;/h4&gt;

&lt;p&gt;术士的力量往往与某个强大（通常是邪恶的）存在相关，比如——一个恶魔。
术士与恶魔的关系可以是契约、崇拜、欺骗或被欺骗、奴役或被奴役。
邪恶的术士乐于与他的盟友共享散播毁灭的喜悦，而善良的术士终生致力于驯服与驾驭这份源自混沌的力量。&lt;/p&gt;

&lt;p&gt;（术士的理念以基督教文化中的“女巫”为蓝本）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;【术士透过天赋力量施展法术，而非经由训练与研究】【邪术师的身体里隐藏着几乎无尽的神秘能量。灵魂深处的黑暗魔法烙印使他们能够发挥出巨大力量，同时还能对多种攻击有所抵抗力。邪术师不会施法，但是他们掌握了控制自己的力量以完成种类有限的特殊技巧的能力，这种能力被称为邪术。】【继承了超自然的血脉，邪术师们追寻那些折磨灵魂的可怖魔法之道。与法师不同，他们只需一念便可释放魔力。黑暗魔能灼烧着灵魂的同时也令他们能抵抗多种形势的攻击并赐予他们危险的力量。邪术师们学习如何驾驭他们的力量以施展一些有限的，被称为邪术的攻击和诡计。借助与低层界的力量签订某些契约，邪术师们获得比法师、术士们更坚强的法力支持，然而这些契约常常以摄取自身的肉体、灵魂能量为代价。】
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;死灵法师&#34;&gt;死灵法师&lt;/h3&gt;

&lt;h4 id=&#34;认识死亡-超越死亡-理解生命-超越生命&#34;&gt;——认识死亡，超越死亡；理解生命，超越生命&lt;/h4&gt;

&lt;p&gt;死灵法师是法师的一个支系，他们醉心于研究世界上最奇妙的现象——生命与死亡。&lt;/p&gt;

&lt;p&gt;死灵法师是操作灵魂与肉体的大师，他们能够唤起死尸，操纵血肉傀儡，用宝石束缚灵魂，改造不死生物甚至是自己。&lt;/p&gt;

&lt;p&gt;死灵法师专精于负能量，常年与负能量为伍使得他们苍白、冰冷、瘦弱，这无关于善良或者邪恶。当然，死灵法师的研究令他们不可避免地接触邪恶的存在，同时长时间暴露于负能量之下。&lt;/p&gt;

&lt;p&gt;因此他们的性格很可能偏向于黑暗。死灵法师对待生命的态度混合着崇高的敬畏与异样的冷漠，他们既可能为新生的婴儿祈祷，又可能杀死无辜的女孩并将她转化为缚魂尸。&lt;/p&gt;

&lt;p&gt;死灵法师的善恶观念常常也是模糊冷漠的，而灵魂与死亡的领域十倍甚于其他领域的危险。他们可能是纯粹的学者，但他们单纯的研究可能对他人以至世界造成不可饶恕的伤害。于此同时，死灵法师的研究通常是血腥、腐臭，令常人反胃的，因此研习死灵法术通常被视为对生命的亵渎。死灵法师往往处在被排斥、打击的状态。他们的结社与活动往往是秘密进行的。&lt;/p&gt;

&lt;p&gt;死灵法师对死亡与灵魂的理解是如此深刻，为了追求终极，他们会想尽办法对抗死亡的降临。——将自己转化为不死生物——比如巫妖或尸巫，就是一个很不错的点子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;对于死灵师而已，魔法基于这样的命题，即生命是整个宇宙中的一个必要元素，而且像能量或物质那样可以被控制和操作。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;代表法术：死亡、咒法
其他法术：变化&lt;/p&gt;

&lt;h3 id=&#34;萨满&#34;&gt;萨满&lt;/h3&gt;

&lt;h4 id=&#34;万物有灵&#34;&gt;——万物有灵&lt;/h4&gt;

&lt;p&gt;萨满信仰祖先或自然灵，通过与“灵魂”的沟通来获得力量。&lt;/p&gt;

&lt;p&gt;他们的力量来源于沟通，而非学习或驾驭。他们发挥力量的方式是对万物之灵的“请求”而非命令&lt;/p&gt;

&lt;p&gt;灵魂对于死灵法师与萨满同样重要，在死灵法师的眼中，灵魂是神秘的研究对象；而在萨满的眼中，任何灵魂都是与自己平等的神圣的存在。&lt;/p&gt;

&lt;p&gt;萨满是部落中的长者与智者，萨满的职责是精神的领袖与导师，而非学者或战士。&lt;/p&gt;

&lt;p&gt;萨满与他的族人在一起才能完全展现自己的力量。萨满能抚平战士的伤口，令他们的刀剑锋锐无匹，皮肤坚不可摧。&lt;/p&gt;

&lt;p&gt;游戏中的萨满往往体现为原始的先祖崇拜与自然崇拜，同时混合了与巫毒教、德鲁伊教派的某些成分。与法师的塑能法术相对地，萨满的法术大多来源于自然现象或者对自然力的引导。&lt;/p&gt;

&lt;p&gt;（萨满的理念以现实存在的萨满教为蓝本）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;萨满教是分布于北亚一类巫觋宗教，包括满族萨满教、蒙古族萨满教、中亚萨满教、西伯利亚萨满教。萨满（珊蛮）曾被认为有控制天气、预言、解梦、占星以及旅行到天堂或者地狱的能力。萨满教传统始于史前时代并且遍布世界。最崇拜萨满教的地方是伏尔加河流域、芬兰人种居住的地区、东西伯利亚与西西伯利亚。满洲人的祖先女真人，也曾信奉萨满教，直到公元11世纪“萨满”来自满语及其他通古斯语族语言。此词语在通古斯语中是“智者”、“晓彻”的意思。萨满教认为，天地生灵都是有沟通的可能的，通过萨满的各种仪式活动，能够与某些生灵，特别是与有修为者进行沟通，从而到达问卜、医疗，甚至控制天气的目的。萨满是氏族与部落的精神领袖。他们和灵魂沟通，有预知未来的能力，并在黑暗的年代里指引他们的人民渡过难关。许多人将他们的智慧和平静误解为和平主义者的天性。事实上，当受到挑战的时候，萨满拥有强大的能力来对付扰乱自然秩序的家伙。萨满们相信万物皆有灵，能与大地，火焰，风暴，水流沟通。很多人认为萨满信奉元素力量，实际上，他们处于平等的沟通状态。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dnd的法术学派&#34;&gt;DND的法术学派：&lt;/h3&gt;

&lt;h3 id=&#34;防护系-abjuration&#34;&gt;防护系（Abjuration）&lt;/h3&gt;

&lt;p&gt;顾名思义，防护系法术是以防护为主。它们可以制造物理或魔法障壁、消除物理或魔法能力、伤害入侵者或甚至驱逐来自异界的生命体。防护系的代表法术包括：「防护邪恶」、「解除魔法」、「防魔法力场」和「放逐术」。&lt;/p&gt;

&lt;h3 id=&#34;咒法系-conjuration&#34;&gt;咒法系（Conjuration）&lt;/h3&gt;

&lt;p&gt;咒法术系法术分属五个子学派。咒法系法术可以产生物体、生物或某些能量（召唤），也可以从其他位面传来生物（呼唤）、进行医治（医疗）、长途移动生物或物品（传送）或在特定地点制造物体和效果（创造）。&lt;/p&gt;

&lt;h3 id=&#34;预言系-divination&#34;&gt;预言系（Divination）&lt;/h3&gt;

&lt;p&gt;预言系法术可以使你知道过去的秘密、预测未来、找到物品或看穿骗人的法术。此系的代表法术包括：「鉴定术」、「侦测思想」、「锐耳术／鹰眼术」和「真知术」等。&lt;/p&gt;

&lt;h3 id=&#34;附魔系-enchantment&#34;&gt;附魔系（Enchantment）&lt;/h3&gt;

&lt;p&gt;附魔系法术可以影响他人心智，控制其行为。此系的代表法术包括：「魅惑人类」与「暗示」。&lt;/p&gt;

&lt;h3 id=&#34;塑能系-evocation&#34;&gt;塑能系（Evocation）&lt;/h3&gt;

&lt;p&gt;塑能系法术可以操弄魔法能量，就像是无中生有。许多法术具有华丽的效果，通常也能造成重大的伤害。此系的代表法术包括：「魔法飞弹」、「火球术」和「闪电束」等。&lt;/p&gt;

&lt;h3 id=&#34;幻术系-illusion&#34;&gt;幻术系（Illusion）&lt;/h3&gt;

&lt;p&gt;幻术系法术可以欺瞒他人，使人看见不存在之事，或看不见存在之事。该系法术也可使人听见幻音，或记忆从未发生之事。此系的代表法术包括：「无声幻影」、「隐形」和「迷罩」等。&lt;/p&gt;

&lt;h3 id=&#34;死灵系-necromancy&#34;&gt;死灵系（Necromancy）&lt;/h3&gt;

&lt;p&gt;死灵系法术是操弄死亡与生命力量的法术，大多与不死生物有关。此系的代表法术包括：「惊恐术」、「操纵死尸」和「死亡一指」等。&lt;/p&gt;

&lt;h3 id=&#34;变化系-transmutation&#34;&gt;变化系（Transmutation）&lt;/h3&gt;

&lt;p&gt;变化系法术可以改变事物的性质或状态。此系的代表法术包括：「变巨术」、「缩小术」、「变形术」和「形体变化」。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>提高工作效率的“玄学”：改变对时间的感知方式</title>
      <link>http://goblinlaboratory.win/post/%E6%8F%90%E9%AB%98%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87%E7%9A%84%E2%80%9C%E7%8E%84%E5%AD%A6%E2%80%9D%EF%BC%9A%E6%94%B9%E5%8F%98%E5%AF%B9%E6%97%B6%E9%97%B4%E7%9A%84%E6%84%9F%E7%9F%A5%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Sun, 01 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/%E6%8F%90%E9%AB%98%E5%B7%A5%E4%BD%9C%E6%95%88%E7%8E%87%E7%9A%84%E2%80%9C%E7%8E%84%E5%AD%A6%E2%80%9D%EF%BC%9A%E6%94%B9%E5%8F%98%E5%AF%B9%E6%97%B6%E9%97%B4%E7%9A%84%E6%84%9F%E7%9F%A5%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;14世纪晚期，英格兰索尔兹伯里镇的居民被一台机器召唤到当地的大教堂中。这是一个奇妙而奇怪的装置。它由一个立方体构成，里面有一组铁齿轮、车轮和铁条。它不停歇地拉动着里面的绳子。其中的石块在凉爽的空气中极其微小的摆动着。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;它如同被一个守时的鬼魂缠住一样，以一天一次的频率，敲响里面的钟状物。&lt;/p&gt;

&lt;p&gt;这是一款时钟。它不为任何人所需要。索尔兹伯里的人们生活在一个没有约定的世界里。或者更确切地说，他们的唯一约定是与上帝会面。索尔兹伯里的钟声将人们与神圣的义务联系起来，而这只是人类及其工具与时间之间关系不断变化的舞曲中的一小步。&lt;/p&gt;

&lt;p&gt;20世纪末，弗朗西斯科·西里洛发明了番茄工作法。“这个独特的时间管理方法为人们带来及时且持久的结果。掌握它，你就能完成任何事情。”全世界的知识工作者开始把番茄计时器放在自己的桌子上。&lt;/p&gt;

&lt;p&gt;貌似每个人都尝试过番茄工作法，但是却没有人能够坚持下来。你设置一个25分钟的定时器。定时器响了，你可以喝一杯La Croix。然后，你又设置了25分钟的时间。到时间了，你又有时间喝一杯La Croix。之后，你查看了自己的电子邮件，然后两个小时的时间瞬间消失。&lt;/p&gt;

&lt;p&gt;“哦，我有时会尝试番茄工作法，”你接着说道。“我需要设置一个定时器。再做一些事情。”&lt;/p&gt;

&lt;h3 id=&#34;1-让自己处于正确位置&#34;&gt;1. 让自己处于正确位置&lt;/h3&gt;

&lt;p&gt;时间自然而然地走向我们，如同一条从未分化的河流。我们的注意力从一个时刻跳到另一个时刻，总是在做出相关反应。在这种模式下，我们关注于手头的任务，却很少关注于自己为什么要去这么做。&lt;/p&gt;

&lt;p&gt;这就是人们整天忙于处于那些无关紧要的事情的场景。于你而言，最重要的并不一定是那些站起来向你挥舞着手臂的人，而可能是那些在角落里盘腿坐着，沉思着的人。&lt;/p&gt;

&lt;p&gt;我们可以通过一致的仪式和节奏来改变我们对时间的感知方式。我们熟悉于周末的社交礼仪，以及一日三餐的习惯。这些节奏将时间分割成离散的块状，使我们更容易理解。&lt;/p&gt;

&lt;p&gt;有意识地在你的一天中引入30分钟的工作时间间隔可以让自己对工作有更多的精神控制。但是你需要将其置于一个系统用以支持这个新节奏，否则你永远不会采用它。&lt;/p&gt;

&lt;p&gt;在每天开始之时设定自己的时间块目标&lt;/p&gt;

&lt;p&gt;在工作中使用计时器是提高工作效率的第一个步骤。但是仅仅设置时间却还不够。你必须做一项需要深思熟虑且有一定难度的工作以确保你所感知时间的方式真正在发生变化。&lt;/p&gt;

&lt;p&gt;在一天的开始，写下你将完成多少个pom，（比如，时间块）。考虑一下当天有多少个会议，以及转换成本。这里有一个例子：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1pom=30分钟=（25分钟工作+5分钟休息时间）。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;估计约5分钟转换至1pom的转换成本=35分钟。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;8小时=480分钟=大约13个pom。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;午餐用去1pom。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;今天2.5小时的会议用去5个pom。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;帮助他人用去1pom。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我一天要试着完成6个pom。&lt;/p&gt;

&lt;p&gt;设定一天的目标可以帮助你在休息或分心后重心设定工作时间。将其看作是一项推动自己成长的挑战。&lt;/p&gt;

&lt;p&gt;使用复杂工具具有可行性&lt;/p&gt;

&lt;p&gt;确实，用一张纸简单写下待办事项即可。但是对于选择时间管理工具来说，简单并不是唯一的目标。我选择一种我所喜欢的工具会使我更有可能使用它。&lt;/p&gt;

&lt;p&gt;传统的番茄工作法需要你每天记下自己需要完成的pom任务数量。但是，对于软件工程师而言，我建议采用不同的方法。你可以将番茄工作法与任务细分和做笔记相结合。&lt;/p&gt;

&lt;p&gt;工程笔记可以在文本编辑器内部很好地完成。你可以将文件名、标识符、命令和代码粘贴在编辑器中。你可以用一个系统做笔记，另一个系统跟踪pom完成情况。但是，我建议你把笔记和pom放在同一个文件夹里。这能够使你的pom可以像笔记一样被检索，也消除了在pom和笔记之间来回切换的麻烦。&lt;/p&gt;

&lt;h3 id=&#34;2-写下有效的微观目标&#34;&gt;2. 写下有效的微观目标&lt;/h3&gt;

&lt;p&gt;有没有感觉到自己正在做的事情不可能进行下去了？软件工程师们一定知道这种陷入困境的感觉。&lt;/p&gt;

&lt;p&gt;当你遇到一个棘手的问题，时间就会不断陷入这个无底洞一样的任务中。你可能会失去完成任务的成就感。这项任务规模会扩大至原来的两倍、三倍乃至四倍。&lt;/p&gt;

&lt;p&gt;就像你带了一只小狗回家，结果它却长成了一头犀牛。&lt;/p&gt;

&lt;p&gt;为了不断取得进步，你需要不断定义和重新定义你正在做的事情。&lt;/p&gt;

&lt;p&gt;为每一个pom设定一个可实现的目标&lt;/p&gt;

&lt;p&gt;你已经写下了那些你今天需要完成的目标任务。现在，写下一组你认为可以在第一个pom中绝对完成的任务。&lt;/p&gt;

&lt;p&gt;今日目标：6pom&lt;/p&gt;

&lt;p&gt;Pom 1：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[ ]本地复制CSS转换错误。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[ ]完成一项本地修复。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我将这些任务设为一个pom微目标。花时间想想它们，然后设想自己能否在25分钟内完成它。只有当你相信自己能够完成时再动身去做。如果仍然觉得这不可行，那就把目标再变小一点。&lt;/p&gt;

&lt;p&gt;现在，设置一个25分钟的定时器，然后去做那些你要去做的所有事情。&lt;/p&gt;

&lt;p&gt;如果你在25分钟内没有完成目标，那就休息5分钟。当继续工作时，不要再为同一个微目标而努力。如果你在一件事情上花了不止一个pom时，你将会体验到一种连续的流。它会从你的指尖溜走。&lt;/p&gt;

&lt;p&gt;这也即是说，我不建议你切换到一个完全不同的微目标上面。相反，从一个小的子目标上再次开始。专注于这个子目标而不是下一个pom的更大目标。&lt;/p&gt;

&lt;p&gt;分解微目标&lt;/p&gt;

&lt;p&gt;如果你没有在Pom 1中完成“完成一项本地修复”的任务。由于Pom 1的时间已经结束，那么这个目标处于没有核查的状态。不要回去检查那些在pom中没有完成的目标。&lt;/p&gt;

&lt;p&gt;相反，写下你的下一个pom和它所包含的微目标。&lt;/p&gt;

&lt;p&gt;Pom 1：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[x]本地复制CSS转换错误。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[ ]完成一项本地修复。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;＞嗯，我需要在DOM中更长保留这个元素以确保转换工作正确。&lt;/p&gt;

&lt;p&gt;Pom 2：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[ ]向父组件添加一个参数，用于显示子组件。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[ ]为超过1000毫秒设置一个错误超时参数。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下一个pom基本上是同一个工作的延续。但是你已经重新定义了工作内容，从而使其更容易实现。&lt;/p&gt;

&lt;p&gt;这就突出了一个重要区别。虽然这些微目标看起来都是待办事项，但是却有了完全不同的达成目标。微目标不应该是那些你之后要去做的积压工作的待办事项，它是一种对于你即将要做的事情的表达。你应该将其看作一个附加文档。你所长期积压的工作可以类似属于一个Asana的工作跟踪系统。&lt;/p&gt;

&lt;p&gt;无论你去做什么，需要确保你的微目标是一些可具体交付的事情。能够有一些证据表明你完成了某一项微目标。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[ ]调查为什么会出现这种错误//这是一种模糊不清的表达。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[ ]找到问题文件并添加它的名称//这样会更好！&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为一个微目标设立可交付标志，这会让你有更清晰的进度感。&lt;/p&gt;

&lt;h3 id=&#34;3-管理实际中断情况&#34;&gt;3. 管理实际中断情况&lt;/h3&gt;

&lt;p&gt;你一定听说过这种说法。中途打扰是有毒的。对于软件工程师来说，最高效的工作环境需要完全沉默与孤立。&lt;/p&gt;

&lt;p&gt;当下面这些条件具备时，单独工作是一件好事：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;你知道你所需要建构东西的所有规范事项。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你了解正在修改的系统的全部前后环境。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;团队中没有人需要你的帮助。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在现实世界中，即使情况可以满足其中一个条件，也很少有三个条件同时具备。事实上，在大多数情况下，专业软件工程是一项团队任务。协作是工作的关键部分，也是其价值所在。&lt;/p&gt;

&lt;p&gt;有太多的工程师认为，独立工作能达到工作效率的顶峰。他们不情愿参加重要会议。他们不鼓励别人与自己进行交谈。他们因为没有能力去分享自己所知道的东西而成为知识的筒仓。&lt;/p&gt;

&lt;p&gt;但是显而易见的问题是，人们无法消除所有干扰。不要以为自己能够在编写代码时将自己完全隔离，从而建构属于自己的工作流。相反，工程师在工作的过程中应该以一种平衡且可持续的方式对待中断情况。&lt;/p&gt;

&lt;p&gt;掌控被打扰情况&lt;/p&gt;

&lt;p&gt;使用番茄工作法的一个常见错误是在计时结束之后仍然继续工作。为什么这会成为一个问题？如果你能够保持高效率工作，那么为什么不继续工作呢？这样做会有以下事情发生：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;你选择继续工作直到陷入困境。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你休息了5分钟。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;你被拖延住了。谁想继续一个被卡住的项目？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;继续从事一项处于正常轨道的工作要有趣的多。这就是为什么我建议在计时器停止时立即停止工作。&lt;/p&gt;

&lt;p&gt;但是你的思路怎么办呢？由于离开了工作，你不会失去所有的心理状态吗？&lt;/p&gt;

&lt;p&gt;仅仅依赖于心理环境就如同在RAM中储存数据库一样。它容易、简单且不顾后果。你需要通过好好做笔记来具体化你所处的情境。&lt;/p&gt;

&lt;p&gt;当你在工作的时候把这些笔记保留下来，那么每25分钟休息一次就容易多了。这也带来一个奇妙的副作用，就是其他所有干扰情况也变得更容易处理。&lt;/p&gt;

&lt;p&gt;我并没有提倡你接受所有的干扰。但是某些干扰行为十分重要。外化你的心理环境有助于你为工作做好准备。&lt;/p&gt;

&lt;p&gt;与你的系统建立协作关系&lt;/p&gt;

&lt;p&gt;我建议你在工作的时候关闭Slack。但是，之后你需要在番茄工作法结束时重新打开它来检查消息。无论你在做什么，都需要与自己的同事进行明确的对话和交流喜好。当然，把它用于你使用Slack时就更好了。&lt;/p&gt;

&lt;p&gt;如果真的出现了紧急情况怎么办？你应该讲清楚，让他去找你或是给你打电话的行为是可接受的。让自己舒服地接受每25分钟关闭掉系统通知的感觉。&lt;/p&gt;

&lt;p&gt;那么电子邮件呢？我推荐这些做法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;为处理邮件设置一个微目标。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;快速决定邮件需要归档还是需要回复。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;无论哪种方式，你的收件箱最后应该是全部处理状态。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于那些需要回复的邮件，把它们放在自己的pom中设置为微目标。&lt;/p&gt;

&lt;p&gt;时间和你呆在一起&lt;/p&gt;

&lt;p&gt;我们不是以理性的方式感知时间。我们是从情绪上感知时间。所以不要期望你的自然冲动会带领自己完成工作。不要把时间当作一种无穷无尽的流动方式，而是将其分割为有明确目标的离散块状。你会发现用理性且富有成效的方式来思考时间是一种更直观的方法。&lt;/p&gt;

&lt;p&gt;用一星期的时间关注于那些使用工作时间的方式。通过一些努力和反思，你对工作时间的感知将会发生变化。你将变得更有效率，并能从所做的事情中获得更多乐趣。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>中国当代艺术编瞎话速成指南</title>
      <link>http://goblinlaboratory.win/post/%E4%B8%AD%E5%9B%BD%E5%BD%93%E4%BB%A3%E8%89%BA%E6%9C%AF%E7%BC%96%E7%9E%8E%E8%AF%9D%E9%80%9F%E6%88%90%E6%8C%87%E5%8D%97/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/%E4%B8%AD%E5%9B%BD%E5%BD%93%E4%BB%A3%E8%89%BA%E6%9C%AF%E7%BC%96%E7%9E%8E%E8%AF%9D%E9%80%9F%E6%88%90%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;p&gt;前⾔&lt;/p&gt;

&lt;p&gt;如何给朋友圈的照⽚配上一段逼格甚高的文字？
交创作时对作品的文字描述没有自信？
厌倦了了复制黏贴不知来处的鸡汤？
逛博物馆时读不懂拗口的介绍？
艺术⽹红开口时一头雾⽔？&lt;/p&gt;

&lt;p&gt;没关系！
读完《中国当代艺术编瞎话速成指南》，
您就可以摇身一变，
跻身新一代中国前卫艺术⾏业从业者！&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;基础词汇&lt;/p&gt;

&lt;p&gt;本章节旨在将⽇常词汇与编瞎话词汇关联对应。&lt;/p&gt;

&lt;p&gt;逐一对比，加深印象，做到过⽬不忘，历久弥新。&lt;/p&gt;

&lt;p&gt;每个词汇都安排了例句赏析，以发编瞎话时的发散性思维。&lt;/p&gt;

&lt;h4 id=&#34;影像创作-拍照&#34;&gt;影像创作 = 拍照⽚&lt;/h4&gt;

&lt;p&gt;例：我刚拍了一张路口的照片。&lt;/p&gt;

&lt;p&gt;——在当下发生之前我对现实生活中街头细碎的片段进⾏了单次影像创作。&lt;/p&gt;

&lt;h4 id=&#34;当下-现在&#34;&gt;当下 = 现在&lt;/h4&gt;

&lt;p&gt;例：我饿了。&lt;/p&gt;

&lt;p&gt;——产⽣了当下⾃身生存的需求。&lt;/p&gt;

&lt;h4 id=&#34;呈现-结果&#34;&gt;呈现 = 结果&lt;/h4&gt;

&lt;p&gt;例：我试了订个外卖，结果没买成。
——在对现代科技发起了尝试的交互后，最终形成了未完成的呈现。&lt;/p&gt;

&lt;h4 id=&#34;非现场-不在那&#34;&gt;非现场 = 不在那⼉&lt;/h4&gt;

&lt;p&gt;例：昨天晚上煎饼师傅换了个地儿做生意。&lt;/p&gt;

&lt;p&gt;——往⽇环境中关键人物的缺失与非现场性创作。&lt;/p&gt;

&lt;h4 id=&#34;打破-模糊-挑战a和b边界-一边a一边b&#34;&gt;打破/模糊/挑战A和B边界 = 一边A一边B&lt;/h4&gt;

&lt;p&gt;例：煎饼师傅一边摊煎饼一边哼歌。&lt;/p&gt;

&lt;p&gt;——传统热工艺街头艺术家打破了经典东⽅餐饮⽂化与流行⾳乐即兴演作的边界。&lt;/p&gt;

&lt;h4 id=&#34;线性-连不上&#34;&gt;⾮线性 = 连不上&lt;/h4&gt;

&lt;p&gt;例：我有时候在这家铺⼦买煎饼，有时候不。&lt;/p&gt;

&lt;p&gt;——个体与创作空间之间长期保持着非线性的交互关系。&lt;/p&gt;

&lt;h4 id=&#34;不可触的-摸不着&#34;&gt;不可触的 = 摸不着&lt;/h4&gt;

&lt;p&gt;例：炉⼦上的⾹气虽然摸不着，但让⼈很有⻝欲。&lt;/p&gt;

&lt;p&gt;——因创作器具所散发出不可触的嗅觉因素引发了观众的共鸣和本能。&lt;/p&gt;

&lt;h4 id=&#34;以xx为媒介-用xx&#34;&gt;以XX为媒介 = 用XX&lt;/h4&gt;

&lt;p&gt;例：烧煤还是烧气，⽕候完全不同。&lt;/p&gt;

&lt;p&gt;——以传统⾃然凝结⽽成的材质为媒介所创作的艺术呈现，与现代化的⼯业文明产品存在显著的差异性。&lt;/p&gt;

&lt;h4 id=&#34;趋向性-靠近-像&#34;&gt;趋向性 = 靠近，像&lt;/h4&gt;

&lt;p&gt;例：他的脸也挺像煎饼。&lt;/p&gt;

&lt;p&gt;——个体的特征与容貌和艺术品之间产⽣了微妙的趋向性。&lt;/p&gt;

&lt;h4 id=&#34;前xx领域-没xx之前&#34;&gt;前XX领域 = 没XX之前&lt;/h4&gt;

&lt;p&gt;例：在摊煎饼之前，应该先把手洗干净。&lt;/p&gt;

&lt;p&gt;——进入前创作领域的空间时，应当首先将凡事之杂质从其所附着的肌体上褪尽。&lt;/p&gt;

&lt;h4 id=&#34;叙事性-说了个事&#34;&gt;叙事性 = 说了个事⼉&lt;/h4&gt;

&lt;p&gt;例：师傅摊饼的时候会跟我说他学煎饼的故事。&lt;/p&gt;

&lt;p&gt;——艺术家在创作中以符号性的语言形式来传达叙事性结构。&lt;/p&gt;

&lt;h4 id=&#34;对xx的指向性-提到xx-关于xx&#34;&gt;对XX的指向性 = 提到XX/关于XX&lt;/h4&gt;

&lt;p&gt;例：一旦谈起城管，师傅还是挺害怕的。&lt;/p&gt;

&lt;p&gt;——艺术家的防御性表达中存在了对来⾃不可抗的暴力行为因素的指向性。&lt;/p&gt;

&lt;h4 id=&#34;不确定性-随便搞的&#34;&gt;不确定性 = 随便搞的&lt;/h4&gt;

&lt;p&gt;例：这张煎饼是赶时间随便做的。&lt;/p&gt;

&lt;p&gt;——这件⾼温艺术品是充满不确定性的即兴创作呈现。&lt;/p&gt;

&lt;h4 id=&#34;潜在的-就是没有-不存在-看不出来&#34;&gt;潜在的 = 就是没有，不存在，看不出来&lt;/h4&gt;

&lt;p&gt;例：煎饼师傅忘记放榨菜了。&lt;/p&gt;

&lt;p&gt;——艺术家在创作时预留了潜在的可变化实体空间。&lt;/p&gt;

&lt;h4 id=&#34;存在xx的可能性-说不定xx也&#34;&gt;存在XX的可能性 = 说不定XX也⾏&lt;/h4&gt;

&lt;p&gt;例：煎饼⾥面放⽕腿肠的话，应该也挺好吃的。&lt;/p&gt;

&lt;p&gt;——存在高温艺术中结合有机之肉体的可能性。&lt;/p&gt;

&lt;h4 id=&#34;产-某种aa的bb的cc-产-c&#34;&gt;产⽣某种AA的BB的CC = 产⽣C&lt;/h4&gt;

&lt;p&gt;例：师傅把饼放进了塑料袋⾥，哗啦一声。&lt;/p&gt;

&lt;p&gt;——艺术家最终通过⼯业化的呈现包裹住纯⼿工的内核，重叠空间的过程中产生了仿佛来⾃自然的陌生回响。&lt;/p&gt;

&lt;h4 id=&#34;形成xx的体验-觉得xx&#34;&gt;形成XX的体验 = 觉得XX&lt;/h4&gt;

&lt;p&gt;例：我⼀口咬下去，味道还⾏。&lt;/p&gt;

&lt;p&gt;——通过观看者肢体对艺术品的一次性解构，在温度与多种材质的交互式呈现下，形成了了绝妙的感官体验。&lt;/p&gt;

&lt;h4 id=&#34;xx的探索与尝试-没成功-闹着玩&#34;&gt;XX的探索与尝试 = 没成功，闹着玩&lt;/h4&gt;

&lt;p&gt;例：回家拿了个平底锅想试看也摊个饼，没做成。&lt;/p&gt;

&lt;p&gt;——受众被艺术品感染而激发欲望，利用常⻅的工业文明产物，继而进⾏创作性的探索与尝试。&lt;/p&gt;

&lt;h1 id=&#34;进阶语法&#34;&gt;进阶语法&lt;/h1&gt;

&lt;p&gt;本章节旨将在词汇的基础进一步拓展，由单个词汇延伸到词组、短语和完整⻓句。
同时通过加强语法结构的内容和思路，以达到随时随地编瞎话的学习目标。
在遣词造句时应假想出⾃己优美而精致的仪容为参照，默读时舌尖轻挑为佳。&lt;/p&gt;

&lt;h4 id=&#34;1-创造并不存在的词汇&#34;&gt;1. 创造并不存在的词汇&lt;/h4&gt;

&lt;p&gt;凡是在名词、动词、或形容词后可添加“性”字的，⼀律添加。
可以表达近似意思的两词，各选⼀个字，组新词。
尽可能将词语或成语的前后部分调换。&lt;/p&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;p&gt;思想性 = 思想 + 性&lt;/p&gt;

&lt;p&gt;表达性 = 表达 + 性&lt;/p&gt;

&lt;p&gt;单⼀性 = 单⼀ + 性&lt;/p&gt;

&lt;p&gt;歇⽌ = 歇息 + 停止&lt;/p&gt;

&lt;p&gt;奏演 = 演奏&lt;/p&gt;

&lt;p&gt;三分⼊木 = ⼊木三分&lt;/p&gt;

&lt;h4 id=&#34;2-挑大词&#34;&gt;2. 挑大词&lt;/h4&gt;

&lt;p&gt;什么词都往大了说。&lt;/p&gt;

&lt;p&gt;有抽象的绝不选具体的，有模糊的绝不选明确的，有复杂的绝不选简明的。&lt;/p&gt;

&lt;p&gt;尽量选生僻、抽象、词义涵盖内容广的词汇。&lt;/p&gt;

&lt;p&gt;把有关无关的词汇组成超长词组。&lt;/p&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;p&gt;哼歌 = 现代流⾏音乐的即兴演奏形式&lt;/p&gt;

&lt;p&gt;煎饼 = 代表当代⽇常饮⻝文化的⾼温⼿工艺术品&lt;/p&gt;

&lt;p&gt;辣椒酱 = 自我伤害与刺激性的共同混合产物&lt;/p&gt;

&lt;h4 id=&#34;3-尽量使-错误语法&#34;&gt;3. 尽量使⽤错误语法&lt;/h4&gt;

&lt;p&gt;模仿英语使⽤⼤量的修饰性从句。&lt;/p&gt;

&lt;p&gt;一句话一口气编完，如果一⼝⽓不够，那最多也就两口。&lt;/p&gt;

&lt;p&gt;特定称谓、突出强调的内容不加双引号，显得这些内容⾃己司空见惯。&lt;/p&gt;

&lt;p&gt;每⾏尽量只出现⼀个逗号或句句号，并否认顿号的存在。&lt;/p&gt;

&lt;p&gt;例：意味着打坐沉思以简单不合逻辑的问题使思想脱离理性范畴，试图接近即便是永⽆法抵达的前语言领域。&lt;/p&gt;

&lt;p&gt;——意味着打坐沉思，以简单不合逻辑的问题，使思想脱离理性范畴，试图接近“即便是永无法达”的前语⾔领域。&lt;/p&gt;

&lt;p&gt;译：就坐着动脑子想些⽐较⻜的东⻄玩⼉，试试不说话，反正好像也没话说。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>建筑设计基础之6种建筑分析图“套路”详解</title>
      <link>http://goblinlaboratory.win/post/%E5%BB%BA%E7%AD%91%E5%88%86%E6%9E%90%E5%9B%BE%E5%85%AD%E7%A7%8D%E5%A5%97%E8%B7%AF/</link>
      <pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/%E5%BB%BA%E7%AD%91%E5%88%86%E6%9E%90%E5%9B%BE%E5%85%AD%E7%A7%8D%E5%A5%97%E8%B7%AF/</guid>
      <description>&lt;p&gt;分析图最重要的是逻辑，这个需要一点一点去领悟和学习。至于表达方面本篇文章帮你解决。分析图的表达风格多样但好像没有听说具体用哪一个软件，这也是让大家苦恼的一个方面。这篇文章简单跟大家分享一下分析图的表达和软件之间的配合。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;画分析图涉及到的软件：SU、V-RAY、PS、AI、RHINO+GH&lt;/p&gt;

&lt;h5 id=&#34;1-建筑类分析图&#34;&gt;1.建筑类分析图&lt;/h5&gt;

&lt;p&gt;主要有形体生成、流线分析、功能分析等等&lt;br /&gt;
 形体生成图涉及软件：SU/Rhino、vray、AI/PS&lt;br /&gt;
 &lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094132g6azdinbmma6uobg.jpg&#34; alt=&#34;&#34; /&gt;
 &lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094133wuoay8g7p4osytzd.jpg&#34; alt=&#34;&#34; /&gt;
 &lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094134yuuavu0zfsfhsxaa.jpg&#34; alt=&#34;&#34; /&gt;
 &lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094134ozh9dxh00o00pdhh.jpg&#34; alt=&#34;&#34; /&gt;
 &lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094135qougu2gwk2wwwuls.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;流线分析图涉及软件：SU/RHINO、AI&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094135qh5cd4pdhhchnhnd.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;功能分析图涉及软件：SU、AI&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094136gthhcnrac3l2dnr2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;2-关于空间的表达分析&#34;&gt;2.关于空间的表达分析&lt;/h5&gt;

&lt;p&gt;剖面图、剖透视图等等&lt;br /&gt;
涉及软件：SU/RHINO+VRAY+PS&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094136iasw9fa9q1os9w6m.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094137z2300k4545wtdfx4.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094137xefnnsb2ex25xyon.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094138w97o7hse09wmh75h.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;3-拆分图&#34;&gt;3.拆分图&lt;/h5&gt;

&lt;p&gt;涉及软件：SU/RHINO+VRAY+PS&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094139mzt7akb5xg66ppa4.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094140lh5k6yu1zle2syxp.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;4-前期分析图&#34;&gt;4.前期分析图&lt;/h5&gt;

&lt;p&gt;前期分析是整份图纸的重要部分，是我们对基地现状和周边环境的考量，影响了我们的整个设计。主要包括图表制作、数据可视化、现状类分析、区位分析、周边环境分析、发展轴线等一些重要的分析图纸。&lt;br /&gt;
涉及软件：PS、AI、GH、excel&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094141w8p5g1lm0v0wzcm5.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094141s1szxus1wo2l4m4z.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094142bcdekx8ke291842h.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094143xd0k9tp97q7ud129.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094144nf7mfqjhozjq0d7j.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094145cizbwqmztnjk3pij.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094145jeqpq9q83oo0myyy.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;5-场地和技术类分析&#34;&gt;5.场地和技术类分析&lt;/h5&gt;

&lt;p&gt;&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094146fytdgeyy3zg0go72.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094147je8m1u3cwu3kmwwm.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094147xcm10m80b471a1gk.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h5 id=&#34;6-总平面-立面图的绘制&#34;&gt;6.总平面、立面图的绘制&lt;/h5&gt;

&lt;p&gt;这一部分对于建筑的表达很重要，只是一些同学过于重视效果图，而忽略了总平面和立面的表达。&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094148nlm1md57ogfitozd.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
&lt;img src=&#34;http://bbsfile.co188.com/forum/201607/14/094149msqbqrv3si3nawew.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;
分析图是我们整个设计最重要的部分之一，而大家却常常忽略它的的重要性。分析图往往能够表达了你对设计的理念和一些想法，一套很棒的分析图也可以成为我们设计的闪光点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>建筑设计基础之总图八要素</title>
      <link>http://goblinlaboratory.win/post/%E5%BB%BA%E7%AD%91%E6%80%BB%E5%B9%B3%E9%9D%A2%E5%9B%BE%E5%85%AB%E8%A6%81%E7%B4%A0/</link>
      <pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/%E5%BB%BA%E7%AD%91%E6%80%BB%E5%B9%B3%E9%9D%A2%E5%9B%BE%E5%85%AB%E8%A6%81%E7%B4%A0/</guid>
      <description>&lt;p&gt;总平面图主要表示整个建筑基地的总体布局，具体表达新建房屋的位置、朝向以及周围环境（原有建筑、交通道路、绿化、地形等）基本情况的图样。总图中用一条粗虚线来表示用地红线，所有新建拟建房屋不得超出此红线并满足消防、日照等规范。总图中的建筑密度、容积率、绿地率、建筑占地、停车位、道路布置等应满足设计规范和当地规划局提供的设计要点。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;八要素&#34;&gt;八要素&lt;/h4&gt;

&lt;p&gt;1、新建筑物
拟建房屋，用粗实线框表示，并在线框内，用数字表示建筑层数（例如11F+1F的住宅楼就表示1层车库层加11层的标准层），并标出标高。&lt;/p&gt;

&lt;p&gt;2、新建建筑物的定位
总平面图的主要任务是确定新建建筑物的位置，通常是利用原有建筑物、道路、坐标等来定位的。&lt;/p&gt;

&lt;p&gt;3、新建建筑物的室内外标高
我国把青岛市外的黄海海平面作为零点所测定的高度尺寸，称为绝对标高（又称之为黄海高程）。在总平面图中，用绝对标高表示高度数值，单位为m。&lt;/p&gt;

&lt;p&gt;4、相邻有关建筑、拆除建筑的位置或范围。
原有建筑用细实线框表示，并在线框内，也用数字表示建筑层数。拟建建筑物用虚线表示。拆除建筑物用细实线表示,并在其细实线上打叉。&lt;/p&gt;

&lt;p&gt;5、附近的地形地物，如等高线、道路、水沟、河流、池塘、土坡等。&lt;/p&gt;

&lt;p&gt;6、指北针和风向频率玫瑰图&lt;/p&gt;

&lt;p&gt;7、绿化规划、管道布置&lt;/p&gt;

&lt;p&gt;8、道路(或铁路)和明沟等的起点、变坡点、转折点、终点的标高与坡向箭头。&lt;/p&gt;

&lt;p&gt;以上内容并不是在所有总平面图上都是必须的，可根据具体情况加以选择。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://i2.muimg.com/567571/4516b9c43cceddf4.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;图线&#34;&gt;图线&lt;/h4&gt;

&lt;p&gt;粗　 实 　线： 新建建筑物的可见轮廓线&lt;/p&gt;

&lt;p&gt;细　 实 　线：原有建筑物、构筑物、道路、围墙等可见轮廓线&lt;/p&gt;

&lt;p&gt;中　 虚 　线：计划扩建建筑物、构筑物、预留地、道路、围墙、运输设施、管线的轮廓线&lt;/p&gt;

&lt;p&gt;单点长画细线：中心线、对称线、定位轴线&lt;/p&gt;

&lt;p&gt;折　 断 　线：与周边分界&lt;/p&gt;

&lt;h4 id=&#34;比例&#34;&gt;比例&lt;/h4&gt;

&lt;p&gt;总平面图的常用比例为： 1：500、1：1000、1：2000。&lt;/p&gt;

&lt;h4 id=&#34;计量单位&#34;&gt;计量单位&lt;/h4&gt;

&lt;p&gt;单位：米，并至少取至小数点后两位，不足时以“0”补齐。&lt;/p&gt;

&lt;h4 id=&#34;建筑定位&#34;&gt;建筑定位&lt;/h4&gt;

&lt;p&gt;坐标网格：A×B，用细实线表示。按上北下南方向绘制。根据场地形状或布局，可向左或向右偏转， 但不宜超过45°。 施工坐标网：X×Y，用交叉的十字细线表示。南北为Y，东西为X。以100 ×100米或50 ×50米画成坐标网格。&lt;/p&gt;

&lt;h4 id=&#34;等高线&#34;&gt;等高线&lt;/h4&gt;

&lt;p&gt;在总平面图上通常画有多条类似徒手画的波浪线，每条线代表一个等高面，称其为等高线。等高线上的数字代表该区域地势变化的高度。&lt;/p&gt;

&lt;h4 id=&#34;绝对标高&#34;&gt;绝对标高&lt;/h4&gt;

&lt;p&gt;等高线上所注的高度是绝对标高。我国把青岛附近的黄海平均海平面定为绝对标高的零点。其它各地的标高均以此为基准。&lt;/p&gt;

&lt;h4 id=&#34;指北针&#34;&gt;指北针&lt;/h4&gt;

&lt;p&gt;指北针:用来确定新建房屋的朝向的。其符号应按国标规定绘制，如图（a）所示，细实线圆的直径为24mm，箭尾宽度为圆直径的1/8，即3mm。圆内指针涂黑并指向正北，在指北针的尖端部写上“北”字，或“N”字。&lt;/p&gt;

&lt;h4 id=&#34;风向频率玫瑰图&#34;&gt;风向频率玫瑰图&lt;/h4&gt;

&lt;p&gt;风向频率玫瑰图:根据某一地区多年统计，各个方向平均吹风次数的百分数值，按一定比例绘制的，是新建房屋所在地区风向情况的示意图。如图（b）所示。一般多用八个或十六个罗盘方位表示，玫瑰图上表示风的吹向是从外面吹向地区中心，图中实线为全年风向玫瑰图，虚线为夏季风向玫瑰图。
由于风向玫瑰图也能表明房屋和地物的朝向情况，所以在已经绘制了风向玫瑰图的图样上则不必再绘制指北针。在建筑总平面图上，通常应绘制当地的风向玫瑰图。没有风向玫瑰图的城市和地区，则在建筑总平面图上画上指北针。风向频率图最大的方位为该地区的主导风向。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>奇幻作品及RPG游戏之精灵族设定</title>
      <link>http://goblinlaboratory.win/post/%E5%A5%87%E5%B9%BB%E4%BD%9C%E5%93%81%E5%8F%8ARPG%E6%B8%B8%E6%88%8F%E4%B9%8B%E7%B2%BE%E7%81%B5%E6%97%8F%E8%AE%BE%E5%AE%9A/</link>
      <pubDate>Wed, 08 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/%E5%A5%87%E5%B9%BB%E4%BD%9C%E5%93%81%E5%8F%8ARPG%E6%B8%B8%E6%88%8F%E4%B9%8B%E7%B2%BE%E7%81%B5%E6%97%8F%E8%AE%BE%E5%AE%9A/</guid>
      <description>&lt;h3 id=&#34;elf-精灵&#34;&gt;ELF（精灵）&lt;/h3&gt;

&lt;p&gt;在众多奇幻作品及RPG游戏中出现的Elf和人类很象，有着尖尖的耳朵，是美丽长寿的种族。一般以森林为家（暗精灵是住在地下），喜爱自然，情感细腻，声音旋律优美，是天生的诗人和舞蹈家；在昏暗的条件下视野也是人的两倍，因此掌握了高超的箭术；学识广博，对魔法有很高的天赋。精灵一般能活到700岁以上，这也是为什么他们总是不慌不忙的原因。精灵总是乐于在一些人类不能理解的事情上花费大量的时间：聆听潺潺的流水，林中鸟鸣风吹……对精灵来说生命的意义在于慢慢发现美好的地方，并充分享受它。他们也很难和生命短促的种族建立深厚的友谊，眼看朋友的故去，而自己还有无尽的生命要度过，实在是件痛苦的事。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h5 id=&#34;night-elf-暗夜精灵&#34;&gt;Night elf （暗夜精灵）&lt;/h5&gt;

&lt;p&gt;暗夜精灵，卡多雷——也就是后来被称为暗夜精灵的种族（后来他们才知道了这个称呼）——信奉月亮女神艾露尼，并认为每到白天的时候，女神就会在永恒之井的湖底沉睡。早期的暗夜精灵牧师和先知以极其谨慎的态度研究永恒之井，想要了解它的秘密和力量。当暗夜精灵社会逐渐壮大之后，他们就开始探索未知的卡利姆多大陆，并且遇到了许多同胞。唯一能使他们停止探索的就是古老而强大的龙。虽然这些巨兽通常是隐居的生物，但他们也会尽全力守护一些神秘的地方。暗夜精灵认为龙是世界的守护神，所以最好不要去侵犯他们，以及他们所守护的秘密。
暗夜精灵不断的探索使他们遇到了许多强大的生物并与他们成为了朋友，其中之一就是半神赛纳留斯，原始森林的守护神。伟大的赛纳留斯对好奇的暗夜精灵十分友好，并花了许多时间来向他们传授关于自然世界的知识。卡多雷与充满生机的森林建立了良好的关系，并且享受着和谐的自然平衡。&lt;/p&gt;

&lt;h6 id=&#34;主要信息&#34;&gt;主要信息&lt;/h6&gt;

&lt;p&gt;人口：24000（85%暗夜精灵，6%熊怪，5%树妖，3%人类，1%其他）&lt;br /&gt;
政体：选举议会&lt;br /&gt;
统治者：高阶女祭司泰兰德·语风（女性暗夜精灵牧师17/猎人7/暗夜精灵1），大德鲁伊范达尔·鹿盔（男性暗夜精灵德鲁伊18）&lt;br /&gt;
主要定居点：达纳苏斯（15000），多兰纳尔（5000），艾达希尔（2000）&lt;br /&gt;
语言：达纳苏斯语，通用语，熊语&lt;br /&gt;
信仰：上古者，德鲁伊教，艾露恩&lt;br /&gt;
资源：黄金，打猎，毛皮，木材&lt;br /&gt;
从属：联盟&lt;br /&gt;
种族坐骑： 夜刃豹&lt;br /&gt;
可选职业： 德鲁伊,猎人,牧师,盗贼,战士，死亡骑士(巫妖王之怒资料片中新增职业),法师(大灾变资料片中新增职业)，
熊猫人之谜资料片新增可选职业：武僧&lt;/p&gt;

&lt;h6 id=&#34;种族天赋&#34;&gt;种族天赋&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;影遁- 主动&lt;/strong&gt;&lt;br /&gt;
瞬发 - 2分钟冷却时间
激活之后遁入阴影，降低敌人侦测到你的几率。持续直到取消或进行移动。取消这个效果之后，你对任何仍在战斗中的敌人造成的威胁值将恢复。&lt;br /&gt;
&lt;strong&gt;迅捷- 被动&lt;/strong&gt;&lt;br /&gt;
使你被近战和远程攻击命中的几率降低2%。&lt;br /&gt;
&lt;strong&gt;难觅行踪- 被动&lt;/strong&gt;&lt;br /&gt;
当你处于影遁或潜行状态下时，降低敌人侦测到你的几率。&lt;br /&gt;
&lt;strong&gt;精灵之魂- 被动&lt;/strong&gt;&lt;br /&gt;
死后变成小精灵，移动速度提高50%。&lt;br /&gt;
&lt;strong&gt;自然抗性- 被动&lt;/strong&gt;&lt;br /&gt;
使你被自然法术命中的几率降低2%。&lt;/p&gt;

&lt;h5 id=&#34;blood-elf-血精灵&#34;&gt;Blood elf （血精灵）&lt;/h5&gt;

&lt;p&gt;血精灵曾经是暗夜精灵的一部分。
一万年前，暗夜精灵就在古卡里姆多大陆上生活了，他们依靠位于大陆中心的永恒之井——一个充满魔法能量的井获得了强大的魔法能量。但是他们却在女王艾撒拉和手下的高等精灵的领导下无节制的使用着魔法能量，终于引来了燃烧军团的入侵。在那次可怕的大爆炸后，永恒之井毁灭了，幸存的暗夜精灵们在德鲁依的领导下重新开始了新的生活。但是，他们决定再也不使用魔法。在永恒之井爆炸后，那些幸存下来的上层精灵——艾撒拉女王的仆从却不安分于这些，他们发动了一次叛乱，妄图解除魔法的禁忌，但是他们失败了。作为惩罚，他们被大德鲁依们流放。
九千年后，阿尔萨斯和他的天灾军团的铁蹄踏开了高等精灵王城——银月城的大门，无数的亡灵军队瞬间毁灭掉了这个曾经繁荣了近万年的精灵王国，并将精灵将军希尔瓦娜斯变成了女妖。阿尔撒斯走后，高等精灵的领地变成了可怕的瘟疫之地。
一小部分幸存的高等精灵逃了出来，他们在他们的领导——血魔法师凯尔萨斯，高等精灵王朝逐日者王朝的最后继承人——的领导下开始了复国的工作，但是离开了他们赖以生存的魔法能量，他们变得烦躁。再加上被联盟方领导人猜疑，他们最终为了魔法能量加入了伊利丹的军队。&lt;/p&gt;

&lt;h6 id=&#34;种族天赋-1&#34;&gt;种族天赋&lt;/h6&gt;

&lt;p&gt;&lt;strong&gt;奥术敏锐- 被动&lt;/strong&gt;&lt;br /&gt;
血精灵在精准的细节方面有着非同一般的天赋，获得额外的爆击几率。&lt;br /&gt;
&lt;strong&gt;奥术洪流- 主动&lt;/strong&gt;&lt;br /&gt;
血精灵可打断施法，使其周围的所有敌方施法者暂时沉默，并回复一定量的法力值。&lt;br /&gt;
&lt;strong&gt;奥术亲和- 被动&lt;/strong&gt;&lt;br /&gt;
血精灵精通神秘技艺，并得到附魔技能加成。&lt;br /&gt;
&lt;strong&gt;魔法抗性- 被动&lt;/strong&gt;&lt;br /&gt;
血精灵对法术伤害具备一定的抗性。&lt;/p&gt;

&lt;h5 id=&#34;dark-elf-黑暗之精灵或者叫drow卓尔&#34;&gt;Dark elf（黑暗之精灵或者叫Drow卓尔）&lt;/h5&gt;

&lt;p&gt;黑精灵，居住在地底洞穴或森林深处的神秘种族，信仰着某种以蜘蛛图腾为标记的邪神，并获得暗黑力量的保护。身高约160公分，体重在50公斤左右，有着黑色或深紫色的皮肤和银白色的头发，对魔法有相当强的抗力，也不怕毒素的侵袭，但是对火焰和寒冷的抵抗力很差。&lt;/p&gt;

&lt;h6 id=&#34;种族天赋-2&#34;&gt;种族天赋&lt;/h6&gt;

&lt;p&gt;+10毁灭技能，+5炼金术，幻术，伪装，轻甲，潜行。&lt;br /&gt;
&lt;strong&gt;先祖之怒（Ancestor’s Wrath）&lt;/strong&gt;：60秒内对近身敌人造成每秒8点的伤害。&lt;br /&gt;
&lt;strong&gt;火焰抵抗（Resist Fire）&lt;/strong&gt;：获得额外25%的火焰抵抗。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 免费资源集合</title>
      <link>http://goblinlaboratory.win/post/Python%20%E5%85%8D%E8%B4%B9%E8%B5%84%E6%BA%90%E9%9B%86%E5%90%88/</link>
      <pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/Python%20%E5%85%8D%E8%B4%B9%E8%B5%84%E6%BA%90%E9%9B%86%E5%90%88/</guid>
      <description>&lt;p&gt;Awesome Python ，这又是一个 Awesome XXX 系列的资源整理，由 vinta 发起和维护。内容包括：Web框架、网络爬虫、网络内容提取、模板引擎、数据库、数据可视化、图片处理、文本处理、自然语言处理、机器学习、日志、代码分析等。&lt;/p&gt;

&lt;p&gt;这个系列没有推荐 Python 书籍、经典博文、交互教程，所以另外推荐：《&lt;a href=&#34;http://blog.jobbole.com/29281/&#34;&gt;25本免费的Python电子书&lt;/a&gt;》、《&lt;a href=&#34;http://blog.jobbole.com/71064/&#34;&gt;学习Python编程的11个（教程）资源&lt;/a&gt;》、《&lt;a href=&#34;http://hao.jobbole.com/pythonmonk/&#34;&gt;PythonMonk：Python交互式教程&lt;/a&gt;》、《&lt;a href=&#34;http://blog.jobbole.com/58226/&#34;&gt;Python程序员必知必会的开发者工具&lt;/a&gt;》。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#awesome-python&#34;&gt;Awesome Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#environment-management&#34;&gt;环境管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#package-management&#34;&gt;开发包和依赖&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#distribution&#34;&gt;分发&lt;/a&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#build-tools&#34;&gt;构建工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#files&#34;&gt;文件操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#date-and-time&#34;&gt;日期和时间&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#text-processing&#34;&gt;文本处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#natural-language-processing&#34;&gt;自然语言处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#documentation&#34;&gt;文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#configuration&#34;&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#command-line-tools&#34;&gt;命令行工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#imagery&#34;&gt;图像处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#audio&#34;&gt;音频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#video&#34;&gt;视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#geolocation&#34;&gt;地理位置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#http&#34;&gt;HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#database&#34;&gt;数据库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#database-drivers&#34;&gt;数据库驱动&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#orm&#34;&gt;ORM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#web-frameworks&#34;&gt;Web框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#cms&#34;&gt;CMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#restful-api&#34;&gt;RESTful API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#authentication-and-oauth&#34;&gt;身份认证&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#template-engine&#34;&gt;模板引擎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#queue&#34;&gt;事件和任务队列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#search&#34;&gt;搜索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#news-feed&#34;&gt;新闻源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#asset-management&#34;&gt;站点资源管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#caching&#34;&gt;Caching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#email&#34;&gt;邮件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#internationalization&#34;&gt;Internationalization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#url-manipulation&#34;&gt;URL 处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#html-manipulation&#34;&gt;HTML 处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#web-crawling&#34;&gt;网络爬虫&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#web-content-extracting&#34;&gt;网络内容提取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#downloader&#34;&gt;下载器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#forms&#34;&gt;表单&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#data-validation&#34;&gt;数据确认&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#anti-spam&#34;&gt;A反垃圾&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#tagging&#34;&gt;Tagging&lt;/a&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#admin-panels&#34;&gt;Admin Panels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#processes-and-threads&#34;&gt;进程和线程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#networking&#34;&gt;网络编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#websocket&#34;&gt;WebSocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#wsgi-servers&#34;&gt;WSGI 服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#cryptography&#34;&gt;加密&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#gui&#34;&gt;GUI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#game-development&#34;&gt;游戏开发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#logging&#34;&gt;日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#testing&#34;&gt;测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#code-analysis-and-linter&#34;&gt;代码分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#debugging-tools&#34;&gt;调试工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#science-and-data-analysis&#34;&gt;科学计算和数据分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#data-visualization&#34;&gt;数据可视化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#machine-learning&#34;&gt;机器学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#functional-programming&#34;&gt;函数式编程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#mapreduce&#34;&gt;MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#third-party-apis&#34;&gt;第三方 APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#devops-tools&#34;&gt;DevOps 工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#foreign-function-interface&#34;&gt;外部函数接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#high-performance&#34;&gt;高性能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#algorithms-and-design-patterns&#34;&gt;算法和设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#workflow-execution&#34;&gt;Workflow Execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#hardware&#34;&gt;硬件&lt;/a&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#miscellaneous&#34;&gt;其他&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#editor-plugins&#34;&gt;编辑器插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#resources&#34;&gt;资源&lt;/a&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#websites&#34;&gt;网站&lt;/a&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#weekly&#34;&gt;周刊&lt;/a&gt;&lt;a href=&#34;https://github.com/vinta/awesome-python#twitter&#34;&gt;Twitter帐号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>你的认知决定你的格局</title>
      <link>http://goblinlaboratory.win/post/%E4%BD%A0%E7%9A%84%E8%AE%A4%E7%9F%A5%E5%86%B3%E5%AE%9A%E4%BD%A0%E7%9A%84%E6%A0%BC%E5%B1%80%EF%BC%81/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/%E4%BD%A0%E7%9A%84%E8%AE%A4%E7%9F%A5%E5%86%B3%E5%AE%9A%E4%BD%A0%E7%9A%84%E6%A0%BC%E5%B1%80%EF%BC%81/</guid>
      <description>&lt;p&gt;你的认知在哪个层级，你的人生就处在什么状态。如果你不快乐，不开心，总是感受到压力或是痛苦，又或是对自己的际遇自艾自怜，那就好好梳理自己的内心吧。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id=&#34;格局体现做事的风格-胸怀和眼光&#34;&gt;格局体现做事的风格、胸怀和眼光&lt;/h4&gt;

&lt;p&gt;一个人的风格无不铭刻着其生长环境和个性素养的特质。从客观上讲，由于每个人所处的时代、教育和成长环境的影响而产生的差异；主观上讲，又受个人素养、个性特征和世界观的影响而各有不同。人的做事风格既是相对稳定性，也是可以转变的。只有适度坚持，存有个性，顺应时势，与时俱进，调整自己的做事风格，才能不断提升格局。&lt;/p&gt;

&lt;p&gt;一个人有大胸怀，做事才有宽度和广度。通常人们会用胸怀宽广来形容。胸怀决定情怀，情怀决定未来。胸襟广阔，包容性就强，气度自然就高。处事就会主次分明，头脑清醒；做事就会避繁就简，提纲携领，成事概率就高。&lt;/p&gt;

&lt;p&gt;一个人眼光高远，视野才能纵横无界。视野宽，思路才广。有思路，才会有解决问题、突破困境的出路。高瞻远瞩，才能把握时势，精准定位，决胜未来。&lt;/p&gt;

&lt;h4 id=&#34;认知层次决定了格局的大小&#34;&gt;认知层次决定了格局的大小&lt;/h4&gt;

&lt;p&gt;认知是人通过心理和思维活动，对客观世界进行认识、了解、分析而最终作出判断的过程和结果。认知能力决定了认知层次。认知层次的高低直接反映出人们看待事物和问题的气度和眼光。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/9c8b8b2a7fda4b99b1213647b7f5f84c_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;有个学子，准备出国。父母请来清华的教授宁向东。请问教授：去哪个国家？读哪所名校？什么专业含金量最高？&lt;/p&gt;

&lt;p&gt;万万没想到，宁教授说：出国吗，千万别把上课当回事儿！重要的是旅行，与人接触、交谈，到处去看看。&lt;/p&gt;

&lt;p&gt;宁教授说，听了他的话，可怜的孩子当时就崩溃了，完全不知所措。&lt;/p&gt;

&lt;h4 id=&#34;宁教授不知道-不同认知层次的人-会有交流困难的&#34;&gt;——宁教授不知道，不同认知层次的人，会有交流困难的。&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/3dd79f95bf4f405889f132248021b6e9_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;有个很出名的故事，说有位妈妈，带着未成年的女儿逛街。&lt;/p&gt;

&lt;p&gt;逛街回来，女儿画了幅《陪麻麻逛街》。&lt;/p&gt;

&lt;p&gt;妈妈拿过女儿的画，瞪眼一看，顿时懵了。女儿的画上，没有车水马龙，没有高楼大厦，也没有诱人的包包。只有一根又一根的，奇怪的柱子。……女儿画的是什么？&lt;/p&gt;

&lt;p&gt;妈妈端详半晌，才突然醒过神来——女儿画的，是一条条人腿。原来，女儿年幼，个头特矮，被母亲牵着手，走在街上，根本看不到成年人看到的商厦车流。她看到的只是无数条成年人的大腿，摆来动去的遮住视线。&lt;/p&gt;

&lt;h4 id=&#34;认知高度不同的人-看到的世界是不一样的&#34;&gt;——认知高度不同的人，看到的世界是不一样的。&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/6272fab22daf45bc941246631abd9b03_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我小时候，曾在很穷的乡下生活。&lt;/p&gt;

&lt;p&gt;每年，村子里都要分红薯，把红薯归拢成一堆堆，看似差不多，但又好像有区别。所以为公平起见，全村人抓阄，抓到哪堆算哪堆。&lt;/p&gt;

&lt;p&gt;有个村民抓到了6号。&lt;/p&gt;

&lt;p&gt;另一个村民，也抓到了6号。&lt;/p&gt;

&lt;p&gt;……咋弄出两个6号涅？&lt;/p&gt;

&lt;p&gt;其实这两个村民，一个是6号，另一个是9号——问题是，6号堆明显大于9号，所以两个村民都说自己是6号，寸步不让。&lt;/p&gt;

&lt;p&gt;争执，吵闹，动手撕打，闹到村支书面前。&lt;/p&gt;

&lt;p&gt;村支书过去看看，发现9号红薯堆明显小于6号堆，果断从自家的红薯堆里，拿出两只放进9号堆，终于平息了纷争。&lt;/p&gt;

&lt;p&gt;然后村支书冷笑说：这俩夯货，也就是一只红薯的出息了。&lt;/p&gt;

&lt;p&gt;后期果然，大学毕业后我重返乡村，看那两户争执红薯的人家，一户门楣破败，一贫如洗。另一户家徒四壁，空无所有。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/0ff603895b824fd4b30f905e1d033f20_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;人类的认知-好似一个巨大的天坑-呈漏斗态势排布&#34;&gt;人类的认知，好似一个巨大的天坑，呈漏斗态势排布。&lt;/h4&gt;

&lt;p&gt;越往下，所见越少，机会越少，越是感受到社会不公，愤怒无比。&lt;/p&gt;

&lt;p&gt;越往上，所见越多，机会越多，越是感觉世界美丽，风光无限。&lt;/p&gt;

&lt;p&gt;下愚莫揣上智，泥陷于认知漏斗底部的人士，看不到上层认知的风景，根本听不懂认知更豁达的人在说些什么。所以清华大学的宁向东教授，教导那要出国的孩子别拿上课当回事，那孩子就懵圈了。&lt;/p&gt;

&lt;h3 id=&#34;热播剧-人民的名义-里把人大概分为九个层级&#34;&gt;热播剧《人民的名义》里把人大概分为九个层级：&lt;/h3&gt;

&lt;h4 id=&#34;01认知最底层-无明之人-总是被人盘剥而无力自保&#34;&gt;01认知最底层：无明之人，总是被人盘剥而无力自保&lt;/h4&gt;

&lt;p&gt;这些人在剧中，就是一个工厂的员工。他们原本持有工厂股份，工厂拆迁收地，地价涨到10几个亿，工人们好开心，以为自己发了——可万万没想到，工人们的股份，被高手通过资本及权力双层运作，统统抢走了。&lt;/p&gt;

&lt;p&gt;工人们怒不可竭，组织起来保护工厂，对抗拆迁——结果不慎点燃汽油，把自己烧得好惨，住院都没人过问（影片中的各级官员，满口大词，但没一个去医院看望过他们）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/bb9c8457f8bb4271bec0e9cb3077ab81_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这些工人在最底层，没有能力保护自己。为了生存只好上街摆摊卖早点，影片说她们被城管追撵，有的一头撞在公共汽车上，殒命身亡。&lt;/p&gt;

&lt;p&gt;——这是时代底层较为真实的写照，社会是否有良知，取决于是否善待这些人。处于这个层级中的人是否有能力，要看他能否走出这个层级。&lt;/p&gt;

&lt;h4 id=&#34;02认知第二层-大风厂工会主席郑西坡及拆迁者&#34;&gt;02认知第二层：大风厂工会主席郑西坡及拆迁者&lt;/h4&gt;

&lt;p&gt;这个层级的人，比最底层略微明白一点点——但只是认知到了最底层的苦与伤，自我认知是懵懂的。所以他们的认知特点，是昏妄不定，喜怒随境。&lt;/p&gt;

&lt;p&gt;昏妄不定，喜怒随境——比如说工会主席郑西坡，已至退休之年，最大的愿望是希望儿子有出息，好赞助他自费出版诗集。而他的儿子呢，却在挖空心思，想从老头手里抠钱。一家人活得稀哩糊涂，相互算计，喜怒不定。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/bcaaf0d929824edf91232e76e40353c0_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;就是这个心情随环境翻覆变化的郑西坡，居然敢带着工人重新创业——现实中是没戏的。但影视剧中，啥怪事都会发生！&lt;/p&gt;

&lt;h4 id=&#34;03认知第三层-草根小老板蔡成功&#34;&gt;03认知第三层：草根小老板蔡成功&lt;/h4&gt;

&lt;p&gt;蔡成功已非凡属之辈，但剧中男主角一语道破：他是个输在起跑线上的人，打小爹不管妈不顾，学习成绩差而不停的留级。虽然他凭着自己的气魄与胆略，硬是杀出条血路，从草根成为统率一千多人的企业家。但商政合围，暗伏死套，饶是蔡成功三头六臂，最后还是被人暗算。&lt;/p&gt;

&lt;p&gt;遭暗算后的蔡成功，疾逃北京向发小求助——发小就是剧中主人公，却把他送来的礼物，嗖的一声扔出去了。&lt;/p&gt;

&lt;p&gt;一芥草根，也配和京官套交情？&lt;/p&gt;

&lt;p&gt;拎着猪头也摸不到庙门，这就是底层小老板普遍的悲哀。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/0993b1dcf2a54139aebcf8ab2bfab95a_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;04认知第四层-买卖无非人情-商业无非人性&#34;&gt;04认知第四层：买卖无非人情，商业无非人性&lt;/h4&gt;

&lt;p&gt;剧中的红顶商女高小琴，就是这个认知的代表。她以一介贫家女起步，攻城略地，白手起家，坐拥近百亿资产。&lt;/p&gt;

&lt;p&gt;她应该是大家最喜欢的、巧取豪夺的高手。她打通政商通道，先让银行给大风厂老板蔡成功慢放贷款，逼蔡成功以工厂股权做抵押，在她这里借过桥贷款。然后再让银行断贷，蔡成功霎间崩盘，十几个亿的地皮，就全归了高小琴。&lt;/p&gt;

&lt;p&gt;——现实中这样的商业者，比比皆是。但，真正的高手资源运作更缜密，不会让任何人抓住把柄。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/201fe3f8af5a4548a634a7d4eac15866_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;05认知第五层-洞悉世象格局-平台重于能力&#34;&gt;05认知第五层：洞悉世象格局，平台重于能力&lt;/h4&gt;

&lt;p&gt;认知到这层次，就具备了娴熟的社会管理能力，做个局长不在话下。&lt;/p&gt;

&lt;p&gt;剧中的男猪脚在此层级，还有公安市局的局长赵东来，以及反角光明区分局的局长程度。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/e276e82fda0149e48d7535158dd6e08a_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这个层级以人为资源，他们知人心，识人性，但谋事思维，使得他们只能从局部来看问题，全局观有待提高。&lt;/p&gt;

&lt;h4 id=&#34;06认知第六层-上窥权道-下俯苍生&#34;&gt;06认知第六层：上窥权道，下俯苍生&lt;/h4&gt;

&lt;p&gt;长年与这个层级的人士交往的人会发现，他们语境温和，目光平静，对部属习惯于下指示，而且他们的指示精湛到了怕人：第一干什么，第二干什么，第三干什么……他们精通事理学，知道一个起点会引发人心的何种骚乱，知道坑在哪里。&lt;/p&gt;

&lt;p&gt;他们话少，言必有中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/6c2c44a7b4254b06a814fc9d8c55e5ee.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;剧中的公安厅长祁同伟、省检察院院长季昌明，纪委书记张树立都在这个层级。所以他们有人想再上一层，有人想平安无事退休，各有各的选择。&lt;/p&gt;

&lt;h4 id=&#34;07认知第七层-勘破死局-人生无困&#34;&gt;07认知第七层：勘破死局，人生无困&lt;/h4&gt;

&lt;p&gt;剧中最让大家心疼的达康书记，就是这种类型。他们思虑全面，别人眼中的死局，落在他们手中就会咸鱼翻身。此类人从政高调，经商低调。如果从政，哪怕只在个小县城，也会在第一时间上达天听。如果经商，他们的钱不会比马云少，但却谢绝马云的风光。&lt;/p&gt;

&lt;p&gt;他们最擅长的，是启动社会资本。他们能用别人的钱，办成自己的事儿，还能给对方带来丰厚回报。所以他们最喜欢说奉献，说为他人着想。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/7c1cd48f8cb1436c98bc43e9999a94e6_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在商界，一个人走到这步，就可以告慰此生，洗洗睡了。&lt;/p&gt;

&lt;p&gt;但在政界，仍有漫长的权力之路，继续挑战他们的生命。&lt;/p&gt;

&lt;h4 id=&#34;08认知的第八层-不为而成-非建而功&#34;&gt;08认知的第八层：不为而成，非建而功&lt;/h4&gt;

&lt;p&gt;剧中主管政法委的副书记高育良，就是这样一个人。他原本是学院的系主任，出学界入政界，痛快淋漓的实现人生抱负，想做成的事，早就做完了。要摆平的人，早就趴下了。值此桃李满天下，弟子遍权门。高老师返璞归真，只想找百八十个红颜知己，卧睡于桃红柳绿之地，尽情的享受人生。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/6dc775cc45674c1380cec8f944801669_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这类人高度疑似天界的神祗，原本得窥智慧天道，却耐不得红尘诱惑，沦落凡尘为妖。现实中他们即有智慧，又有人缘，活得贼啦啦爽。但影视剧中吗，这类妖物是必须要收掉的。&lt;/p&gt;

&lt;h4 id=&#34;09剧中的认知天花板-明察洞悉-大度深沉&#34;&gt;09剧中的认知天花板：明察洞悉，大度深沉&lt;/h4&gt;

&lt;p&gt;省级一把手，其视野之宏阔，词锋之明晰，往往带有一种震骇人心的效果。掌控全局是他们的日常工作，而且他们又精熟人心细节，再繁复的局面，你可能说三天三夜还没讲清楚，他最多不超过五个字，就能够说得明明白白。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/6ebd227196dc461ca7669901839cc7e7_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;见大而行远，迎刃方通简。&lt;/p&gt;

&lt;p&gt;九层之上，犹有高台。&lt;/p&gt;

&lt;p&gt;九渊之下，犹有沟渎。&lt;/p&gt;

&lt;p&gt;如果说，这个世界有竞争的话，竞争的就是认知。&lt;/p&gt;

&lt;p&gt;认知——先是你知道多少，然后是你如何看待这些。&lt;/p&gt;

&lt;p&gt;——知无对错，心生是非。&lt;/p&gt;

&lt;p&gt;一切不过是人性。&lt;/p&gt;

&lt;p&gt;知人知已知世知事，观山观水观海观风。&lt;/p&gt;

&lt;p&gt;释伽拈花而笑，回头就是彼岸。认知升级不过就是心意的一转。睁开眼，环视这辽阔的世界。看天看地看风看水看人心，从局部视野走出，向规律纵深挺进。打开心，释放那迷乱的情绪。知己知彼知世知道知人心，从悒郁的杂绪中走出，俯瞰人性那万古千秋的无尽悲凉。八万四千法门，不过慈悲之心。迟早你会击败心中的软弱与恐惧，让这美丽非凡的大千世界，成为你生命的舞台。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://img.mp.itc.cn/upload/20170517/aa1ce692cbd542ba9e2054e69318026a_th.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;认知事物的本质才能提升格局&#34;&gt;认知事物的本质才能提升格局&lt;/h4&gt;

&lt;p&gt;我们这个世界实际上是一个精神实体，认知层次的差异决定了我们并不生活在同一个世界。这就是好多发生在我们身边的不起眼的事或不可思议的事，过了几年人家成功了的缘故。你认为“不起眼”、“不可思议”的时候，其实人家已经在布局。要提升格局，就要提高认知能力，改变认知层次，最根本的就是要去认知事物的本质。就是要求我们从繁茂芜杂的信息中，去粗取精，去伪存真，由表及里的进行加工处理，寻找出事物核心的运行原理和规律。抓住这个核心，把它放到更长的时间跨度和更大的空间跨度去分析、去评价、去认知。长此以往，你的自己的认知体系、思维方式、判断方法也就自然形成了，格局也就自然而然的得到提升，就可以看到更高层次的世界了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>摩尔斯电码速成</title>
      <link>http://goblinlaboratory.win/post/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81/</link>
      <pubDate>Sat, 03 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81/</guid>
      <description>&lt;p&gt;摩尔斯电码（又译为摩斯密码，Morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。它发明于1837年，发明者有争议，是美国人塞缪尔·莫尔斯或者艾尔菲德·维尔。 摩尔斯电码是一种早期的数字化通信形式，但是它不同于现代只使用零和一两种状态的二进制代码，它的代码包括五种： 点、划、点和划之间的停顿、每个词之间中等的停顿以及句子之间长的停顿。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;正规的摩尔斯码对照表是这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pic3.zhimg.com/80/546b825c6034065bbfe1c2e7e5d4dfca_hd.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其实记住主要的26个字母就够日常用了，而记26个字母有一张更简单的图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pic1.zhimg.com/80/17f086c52d6e29f450708218dd729969_hd.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;把点和横线以字母的形态呈示出来，基本上看一遍就能记住大半了。不过要注意每个字母下方的一行小字，那是正确的顺序，别搞错了，“.”是“di”，“—”是“dah”。比如J下方是“di-dah-dah-dah”，意思就是“.———”；Y右下角有个小箭头，意思是从下往上，“—.——”，记的时候别弄反了。记住26个字母后，就可以进行简单的书面翻译练习。我当时找的泰戈尔的《飞鸟集》，随便找一条英文译成摩尔斯码，再对着摩尔斯码译成英文。这样英译码，码译英，译个十来条，26个字母基本上就不会忘了。摩尔斯码通常的格式是字母和字母之间以空格隔开，单词和单词之间以“/”隔开。比如“good night”，翻译成摩尔斯码就是“&amp;ndash;. &amp;mdash; &amp;mdash; -../-. .. &amp;ndash;. &amp;hellip;. -/”。初学还可以间隔大一点，更加一目了然。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sketchup快速完全入门手册</title>
      <link>http://goblinlaboratory.win/post/Sketchup%E5%BF%AB%E9%80%9F%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</link>
      <pubDate>Fri, 23 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://goblinlaboratory.win/post/Sketchup%E5%BF%AB%E9%80%9F%E5%AE%8C%E5%85%A8%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C/</guid>
      <description>&lt;p&gt;第一篇 初识su&lt;/p&gt;

&lt;p&gt;第二篇 su全局概述&lt;/p&gt;

&lt;p&gt;第三篇 su功能详解&lt;/p&gt;

&lt;p&gt;第四篇 su的材质和组件&lt;/p&gt;

&lt;p&gt;第五篇 su使用技巧&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;第一篇-初识su&#34;&gt;第一篇 初识su&lt;/h2&gt;

&lt;p&gt;这一篇可以算作一个前言，讨论一些似乎看起来和su没有关系，但实际上密不可分的问题。&lt;/p&gt;

&lt;h3 id=&#34;一-关于su的适用范围&#34;&gt;一、关于su的适用范围&lt;/h3&gt;

&lt;p&gt;以我所接触的人们来说，使用su的人大概可以分为四类“建筑设计”“室内设计”“景观设计”“工业设计”，总的来说，每一类人里都有高手，也许每个人都在使用中有所感受，这里我只说说我的一家之言。&lt;/p&gt;

&lt;h4 id=&#34;建筑设计&#34;&gt;建筑设计&lt;/h4&gt;

&lt;p&gt;据我所知，su被引入cad行业，最早就是在“建筑设计”中被使用的，以我的观点看，su作为建筑设计的模型制作工具，可以说是比较合适的。&lt;/p&gt;

&lt;p&gt;首先说说它的优点：
第一，它的操作界面非常友好，相对于“三视图+相机视图”的模式，su在人机交互界面上有着让人难以抗拒的友善感，在三维操作方面，也显得很灵活；第二，它的工具功能简单，操作方便，我一直认为，软件工具不怕多，就怕复杂，一个工具解决一个基本问题，多个工具组合解决复杂问题，这一点su还是很不错的，在su的工具栏里，只要单击就可以使用这个工具，单击不区分左右键，没有二级工具集，不弹出预设值对话框，一切都是顺序发生的，这一点对新手非常重要；第三，它的模型对简单体块的修改、查看非常方便，对建筑方案的前期推敲非常有利；第四，它的模型是单一文件，包含所有的贴图、块等元素，交换方便。&lt;/p&gt;

&lt;p&gt;其次我们也要面对它的缺点：su最大的问题可以归结为两大类：程序内核本身先天的孱弱和与生俱来的功能的缺失，有这些问题本身并不可怕，真正让你感到不幸的是我要告诉你在可以预见的将来，我们对这两点无计可施，具体的问题会在后面陆续提及。说到具体的问题，有如下几点：第一，su的性能和执行效率非常低下，我可以毫不客气的说它可以荣登我所用过的所有软件中“性能最差”的宝座；这是由它的内核决定的，这里我们不谈这个，第二，su在设计上也存在很严重的问题，首先，su的精度不够，su的精度在长度上只能精确到小数点后1位，既0.1，当你绘制一条0.11单位长度的线时，你会发现在模型信息中这条直线的长度前添加了约等于符号“~”，也许你会说没有人会画这样的线，但是在有曲线相交的情况下，这种线是有可能存在的，su在面积上只能精确到0.01，也就是说面积小于0.01单位的面永远无法封面；第三su设计上另一个缺失就是在su中没有贝斯曲线，su处理曲线只能将曲线转变为多段直线处理，换句话说su不能处理曲线方程，比如在cad里用spl命令绘制的曲线，就是贝斯曲线，这种曲线导入su后，将被转化为多段线，这样一些原本在cad中交叉的线在su导入的过程中就会断开，导致不能封面（其实cad在处理spl时也比较头疼，比如你可以试试，cad里spl无法延伸），而事实是更残酷的，实际上su在处理任何曲线都是以多段线的形式处理的，因此cad中的任何曲线，包括圆、圆弧、多段线中的弧都将无一幸免；第四，当你知道了su连曲线都处理的如此狼狈，那么su弱的可怜的曲面建模能力也就不足为奇了，很多人都在埋怨su的曲面能力，但很少有人知道su曲面能力弱是因为su无法处理贝斯曲线，说了这么多，总的看起来好像su的缺点比优点要多，但是在实际应用中，我们只有在真正关注绝对精准的尺寸的施工图中才会遇到我上述各种缺点，因此，虽然它有很多不足，但仍然是当今非常热门的建模软件。&lt;/p&gt;

&lt;h4 id=&#34;室内设计&#34;&gt;室内设计&lt;/h4&gt;

&lt;p&gt;用su做室内设计的朋友们，可能会比用su做建筑设计的朋友们更能感受我刚才说过的那些缺点，这是因为室内设计比建筑设计更关注细节，更容易遇到上述的那些不足，由于su的性能不高，在场景复杂的情况下难以操作，由于su的精度不够，一些细节的部分无法表达，由于曲线是多段线的形式，一些平滑曲面的效果必然会消耗大量的系统资源，曲面建模能力不足，也使很多设计中个性的亮点难以表现。总的来说，su做室内设计，除了上手方便，基本上没有太多其他的优势。&lt;/p&gt;

&lt;h4 id=&#34;景观设计&#34;&gt;景观设计&lt;/h4&gt;

&lt;p&gt;开门见山，景观设计相对于室内设计，更加不适合采用su，小范围的设计虽然问题不大，但是当场景较大时，su的性能问题首先凸显出来，其次su的曲面问题使得在山地、岛屿的建模上就比较困难，另外，有些人也许以为景观设计要求的精度较低，但实际不是，在一些景观节点的位置，它的精度要求是极高的，如果在这种位置遇到诸如不能封面、曲面不够平滑等问题，将会严重影响整个设计的表现力。因此对于景观设计我不推荐使用su。&lt;/p&gt;

&lt;h4 id=&#34;工业设计&#34;&gt;工业设计&lt;/h4&gt;

&lt;p&gt;我想这个不用我多说了，我周围的su高手，没有一个是进行工业设计的，而我身边的工业设计高手们，也没有一个使用su……&lt;/p&gt;

&lt;h3 id=&#34;二-关于硬件&#34;&gt;二、关于硬件&lt;/h3&gt;

&lt;p&gt;我总是不停得提及硬件的问题，这是因为它实在太重要了，在这里我虽然不打算多说，但是我请各位一定要认真考虑我下面所说的内容：&lt;/p&gt;

&lt;p&gt;首先：请大家选择尽可能性能强劲的cpu，因为su非常依赖cpu的主频，因此选择性能强劲的cpu绝对是重中之重，关于品牌，希望各位Afan们不要介意，我首推Intel的cpu，因为AMD的cpu在执行多个任务时效率不如Intel高，如果你经常同时打开cad、su、ps或者还有在画图时看电视剧的恶习的话，我奉劝你购买Intel的CPU，但是如果你的预算在5000圆以下，可以考虑AMD的cpu，因为Intel这个奸商东西卖的实在是太贵了！购买Intel的cpu时请大家尽量购买二级缓存大的产品（对于i7系列是三级缓存），我暂且给一个标准吧，购买平均每个核心的缓存大于3M的产品，比如你买的是双核处理器，那么买6M缓存的，如果你是4盒处理器，那么买12M缓存的，最后一点，你可以不信我，但是绝对不要信任何商家！（如果你买的是品牌机或者是笔记本，那么必须优先考虑显卡！！）&lt;/p&gt;

&lt;p&gt;其次：请绝对不要购买ATI的显卡，否则你的su就别想好好用，这一点我不想多说，因为已经说的太多了，（Afan们，我不是故意的，你们也知道）另外如果你想同时打开su和ps cs4以上版本，那么请选择显存512M以上的产品。另外就是我曾经得出的结论，nvidia 的nvs系列显卡是su的最佳搭档，这个结论也是我经过一些实验得出的，当然买了这个显卡你就从此跟大型3D游戏saygooglebye了，如果你是个游戏狂，你要取舍一下了，专业卡的最大优势在于当需要自适应降级的时候，它的响应速度比游戏卡要高数十上百倍，各位自己斟酌吧。（如果你买的是品牌机或者是笔记本，那么必须优先考虑显卡！！这都是血的教训啊！！）&lt;/p&gt;

&lt;p&gt;再次：现在内存便宜了，有条件就上4G内存吧，如果你稍微具有一点计算机知识，那么我建议你使用64位系统，可以搭载更多的内存，但是注意，内存的容量永远不要出现单数，比如3G、5G……&lt;/p&gt;

&lt;p&gt;最后：一个好的机箱可以帮你避免在渲图中死机，一个高分辨率的屏幕可以帮助你更好的查看模型，导出图片，一个手感舒适的鼠标可以让你更专注于设计……&lt;/p&gt;

&lt;p&gt;PS：以上这些忠告，都是我的经验之谈，请大家千万千万多考虑啊！&lt;/p&gt;

&lt;h4 id=&#34;三-关于su的版本&#34;&gt;三、关于su的版本&lt;/h4&gt;

&lt;p&gt;su的版本，1234567，每一个软件都是这样发展来的，也许你觉得这没什么好说的，那我就少说一些：&lt;/p&gt;

&lt;p&gt;一、su5.0,也许你不知道，su在6.0版本以前，并不是google开发的，su原本是last software公司的一款产品，su原本没有免费版，有的只是功能完整的商业版，而且提供多语言支持。google收购之后，推出了6.0版本，google收购su起初是为了发展它的google earth，因此，自从google收购su后，su在功能上一直都没有什么进步，反而偏离了原来的方向，google的官网上简体中文版只提供6.0版本，也就是第一个版本，之所以以后不再有简体中文版，是因为时至今日google在中国一共只卖出了3套su。&lt;/p&gt;

&lt;p&gt;二、su7.0版本，谢天谢地，google终于在收购su后迈出了向前的一步，那就是在7.0中加入的“相交线自动截断”功能，这个功能虽然没有在根本上解决su封面困难的问题，但是却为解决这个问题提供了一个思路，因此我在第一时间进行了升级。总的使用感受是“非常不错”，但是遗憾的是google并没有提供这个版本的中文版。&lt;/p&gt;

&lt;p&gt;三、su7.1版本，google终于意识到了在su越来越火的今天，是时候解决性能问题了，因此su步入7.1时代后，性能上得到了突飞猛进的发展，我在这里极力推荐大家升级。另外这里说两个7.1的问题，虽然7.1升级频繁，但似乎还处在提升速度的阶段，因此各种bug层出不穷，su很容易自动退出，因此如果你使用7.1版本，一定要记得多存盘呀！其次就是7.1的注册机目前网上还没有出现，而7.1小版本号不断更新，短时间内也不太可能有注册机，因此目前想使用7.1的方法只能是：安装7.0&amp;gt;使用注册机注册&amp;gt;安装7.1覆盖。&lt;/p&gt;

&lt;p&gt;四、关于汉化：由于google拒不退出简体中文版本，因此很多中文版，汉化版层出不穷，但是时至今日，我们发现以前那些汉化版突然不见了，这其实是迫于政府压力，大家都不再出汉化了，没有了汉化，那么我们就只能使用英文版本了，我个人也是比较推荐使用英文版本的，因为绝大多数命令都是通过快捷键完成的，基本不用看菜单，而英文版又是更新最快，现在su正处在发展期，因此每一次更新都会有很大进步，用英文版可以随时保持最佳性能。当然如果真的对英文不熟悉，那么你也可以去下载繁体中文版本，繁体中文版本现在已经有7.1了。需要提醒的是，不同语言版本之间的快捷键是不能通用的，如果你有自己的快捷键文件，那么更换语言的时候就不能用了。&lt;/p&gt;

&lt;p&gt;五、扫盲：有的朋友不知道免费版和专业版的区别，免费版有一些功能限制，比如免费版不能导出dwg、不能使用插件等，由于地形工具其实也是一个插件，因此免费版也不能使用地形工具。另外专业版提供30天试用，如果你的试用期过了，而又没有注册的话，那么也将自动退回免费版，不能使用插件等功能了。&lt;/p&gt;

&lt;h2 id=&#34;第二篇-su全局概述&#34;&gt;第二篇 su全局概述&lt;/h2&gt;

&lt;p&gt;和任何软件一样，su提供了一些全局的属性以使软件更适合个人的使用习惯，有一些内容其实是很重要的，简单的设置可以帮助我们更灵活的使用软件，下面我就为大家简单介绍一下~虽然我使用的英文版本，但是我还是尽量回忆在中文版里是什么样子，但如果我实在记不得中文版里的布局，我就只好按英文版的描述了，大家见谅！&lt;/p&gt;

&lt;h3 id=&#34;一-参数设置面板&#34;&gt;一、参数设置面板&lt;/h3&gt;

&lt;p&gt;su默认的快捷键中F12是参数设置面板，你也可以在菜单栏“窗口|参数设置”找到，（这里我还发现了一个小bug哈，当你打开一个参数设置面板的时候你就不能点击菜单栏了，但是你重复按F12可以打开多个参数设置面板~~），这里为整个软件提供了全局设定，我介绍比较重要的几个项目：&lt;/p&gt;

&lt;p&gt;一、applications：就是左边第一个选项，这里定义了默认的图片编辑器，你可以点击右边的按钮选择，我选择了ps的主程序~这样我可以直接调用ps编辑材质，具体方法在后面说明。&lt;/p&gt;

&lt;p&gt;二、drawing：绘图，这里可以定义是否连续画线，在su里，默认连续画线是被选中的，这种情况下如果你画的线没有闭合成面，那么su自动将上一条线的终点定义为下一条线的起点，如果你只想画单独的线，那么你就必须在画完一条线之后按快捷键L重置画笔工具，而当取消连续画线之后，就比较方便了，因为你需要为每一根线指定起点和终点。&lt;/p&gt;

&lt;p&gt;三、Extensions：扩展，一些插件需要在这里加载，包括地形工具和ruby控制台，如果你安装了一些插件却在菜单栏里找不到的话，来这里看看。&lt;/p&gt;

&lt;p&gt;四、General：全局，这里常用的一个选项就是设置自动保存时间，当模型大到一定程度（&amp;gt;30M），存储将变得缓慢，如果按默认的5分钟自动保存，将会影响绘图（因为存储时会发生假死）。&lt;/p&gt;

&lt;p&gt;五、OpenGL：这个是一个影响性能的关键，使用“硬件加速”和“快速反馈”，不要使用“最大纹理尺寸”，另外原来的版本里这里还有一项叫做“修正点选背面的驱动程序错误”，我的7.1版本已经没有这个选项了，莫非google认为他们已经完全解决这个问题了？右面下面的那一部分，依不同的显卡而有不同的选项，但我强烈建议选择抗锯齿为0x的，因为抗锯齿非常影响速度，几乎是2x抗锯齿速度降一半，4x抗锯齿速度降为1/4，所以我强烈建议就选第一个即可。&lt;/p&gt;

&lt;p&gt;六、shortcuts：快捷键，这里可以设置快捷键，旁边的“重置”按钮可以将快捷键恢复为系统默认，另外底下有输入、输出，按理说是可以备份和恢复快捷键的，但是经常会出现虽然显示导入成功，但是实际没导入的现象，因此这个功能基本没用，我推荐采用注册表备份发，su的快捷键在注册表中的位置是：“HKEY_CURRENT_USER\Software\Google\SketchUp7\Settings”不管是哪个版本，也不管是什么系统，目前都是在这个位的。&lt;/p&gt;

&lt;h3 id=&#34;二-模型信息面板&#34;&gt;二、模型信息面板&lt;/h3&gt;

&lt;p&gt;模型信息的快捷键是F10，上面所说的“参数设置”中设置的内容，对每一个模型都是适用的，而“模型信息”的内容，仅对本模型适用。这个面板我个人适用的较少，因为我既不输出动画，也不关心地理信息，所以我简单说明一下：&lt;/p&gt;

&lt;p&gt;一、animation：动画，这里可以设置在不同页面转换时是否使用动画效果，如果模型过大，使用动画效果可能会死机，此时可以取消这个选项。&lt;/p&gt;

&lt;p&gt;二、file：文件，这里有一个关键的选项叫“存储时重新定义缩略图”，当模型过大时，定义缩略图需要的时间是非常惊人的，因此推荐取消这个选项，可以大幅提高文件存储时的等待时间。&lt;/p&gt;

&lt;h3 id=&#34;三-菜单栏&#34;&gt;三、菜单栏&lt;/h3&gt;

&lt;p&gt;菜单栏里包含了su所有的功能，都是非常简单的，这里我提示几点：&lt;/p&gt;

&lt;p&gt;一、输入、输出dwg文件：输入的dwg文件，如果输入前模型内有其他的内容，那么dwg将以组件的形式导入进来，如果模型内没有其他内容，那么导入的dwg将是单线形式，另外，导入dwg的时候右下角有一个“选项”按钮，里面可以设置输入的dwg文件的单位，su中默认是英寸，但是我们的dwg通常是毫米，因此需要修改一下。输出dwg文件有三种情况，最简单的就是输出成dwg的三维模型，只要选择“文件|输出|3D模型”，选择dwg格式就可以了。第二种情况是输出剖断线，这个也简单，只需选择“窗口|输出|剖面”，选dwg格式就可以了。但是这种方法输出的内容只有加粗的剖断线而已，如果想输出未剖到的位置，就遇到了第三种情况，这时应当选择“窗口|输出|2D图像”，选择dwg格式即可。（详细信息见后文）&lt;/p&gt;

&lt;p&gt;二、输入、输出图像：输入图像时，右侧可以选择图像输入的方式，请大家注意，输出图像时，右下角有选项，可以调整分辨率等，这里有一个选项叫做“抗锯齿”，请注意这个抗锯齿和参数设置里德抗锯齿是不一样的，su导出图片的像素上限时9999，并且输出比例被锁定为窗口比例不能改变，如果想改变则需要用输出动画的选项或者使用插件。但是事实上su根本输出不了9999像素的图片，能输出的最大像素跟电脑配置有关，以我的经验最大能输出6000像素左右，但是如果你选择了“抗锯齿”，那么你也许只能输出3000左右的图片了，如果再大就会出现无法输出或者输出的图像有错误，因此，我的做法是，不选择抗锯齿，输出一张大图，然后在ps将大图缩小，比选择“抗锯齿”输出的图还要效果好(这就是神奇的缩减像素采样法)~~当然你也可以试试layout。&lt;/p&gt;

&lt;p&gt;三、组件和群组
也许有人不知道组件和群组的概念，他们的区别就是组件本身有单独的坐标，相同的组件是相关联的，只要编辑了其中的一个，其他的也都会随着改变，类似cad中的块，su中的组件还可以具有面向相机、自动开洞等功能，复制多个组件不会显著增加文件的大小；群组本身是没有坐标的，也不具有组件的各种特性，只是把几个物体简单的组合在一起，类似ps中的图层组的概念，另外顺带提一句，多层嵌套组件或群组是su性能下降的主要原因。&lt;/p&gt;

&lt;p&gt;四、隐藏和显示：这里提示一点，在菜单栏“显示|组件编辑”里有两个选项，可以分别设置当双击进入一个组件或者群组时，是否隐藏模型中的其他内容和是否隐藏相同的组件，这个功能非常有用。&lt;/p&gt;

&lt;p&gt;五、插件：安装过的插件一般会出现在菜单栏的两个位置：“工具”或“plugins”，但也有少部分插件需要在参数设置面板中调用。&lt;/p&gt;

&lt;h3 id=&#34;四-各种窗口&#34;&gt;四、各种窗口&lt;/h3&gt;

&lt;p&gt;在菜单栏“窗口”中，罗列了很多的窗口，其中大部分是非常常用的，下面我来简单介绍一下。&lt;/p&gt;

&lt;p&gt;一、实体信息：实体信息是一个很常用的窗口，它可以显示当前被选择的物体的相关信息，也可以直接在这里修改，比如修改圆弧的段数等，对于组件，它还会显示这个组件在整个模型中一共有多少个。&lt;/p&gt;

&lt;p&gt;二、材质：材质面板中可以浏览材质库或者模型中的材质，使用油漆桶赋予物体材质时这个窗口会自动打开，这个窗口可以说是最常用的窗口了，需要注意的是在su中，任何面都有正反两面，就算你做一个“莫比乌斯环”它也有正反两面，这两面贴上材质看起来是没有区别的，但是在渲染的时候只有正面的材质能够渲染，所以请大家注意一定保持正面朝外。当给一个面赋予材质时，如果赋予的材质是不透明的，那么你点击正面，则赋予材质到正面，点击反面，则赋予材质到反面，如果赋予的材质是透明的，那么只需点击一次，即可同时赋予正反面，但如果你想给一个已经赋予了透明材质的物体赋予不透明材质，那么一定要在正反面分别赋予。给一个组件或群组直接赋予材质，则会替换组件内所有的默认材质，不会影响其他的材质，但是不推荐这样做，会出现一些显示错误。另外在su中，透明的材质，如果透明度低于70，则不产生阴影，高于70则产生阴影，但无论怎么样su中不能产生半透明的阴影。在材质的编辑界面，如果材质有贴图，点击贴图路径右侧第二的按钮，可以直接调用在“参数设置”中设置的默认图像编辑器编辑贴图，编辑完成后，su中的效果会立刻更新。&lt;/p&gt;

&lt;p&gt;三、组件：组件窗口也是非常常用的窗口，这里可以浏览组件库或者模型中的组件，也可以编辑组件的特性，最常用的就是“剖切开口”和“面向相机”，剖切开口的典型效果是，在一个平整的墙面上插入一个具有“剖切开口”特性的窗组件，则在插入窗的位置墙面被自动开洞，而当窗被移动时，开洞也随着窗移动。“面向相机”则常被用来制作2D人物或2D植物，这个特性使组件内部的红蓝轴所在的平面永远面向相机。&lt;/p&gt;

&lt;p&gt;四、风格：风格是su的一个特色，可以快速制作出各种手绘风格的图片，但是我不常用。简单介绍一下，这个窗口同样可以浏览风格库和模型中的风格，在编辑面板里，你可以选择是否显示边线，是否加粗边线，是否显示延长线等线形变化；可以设置默认材质的颜色，可以设置是否显示透明效果，这里一般建议选择快速即可，有透明材质重叠的可以选择中等，但一定不要选择最好，因为bug的缘故显示效果还不如中等好，速度还慢；你还可以设置天空、大地、背景的颜色；添加水印等。&lt;/p&gt;

&lt;p&gt;五、图层：图层在大多数软件中都有，而且功能几乎都一样，使用图层的开关控制模型中显示的内容，可以方便操作和提高速度。需要提醒的就是，su中的组件和cad中的块一样，组件和组件中的内容可以不再同一个图层上。另外图层面板里那个颜色，指的是边线的颜色，这个一般在su里是没用的，但是如果你导出了3d的dwg文件，那么在cad中就会看到颜色的不同了。&lt;/p&gt;

&lt;p&gt;六、Outliner：这个在中文版里好像叫什么“资源管理器”？这个窗口显示了模型中组件的嵌套关系，有时候选择物体非常有用。&lt;/p&gt;

&lt;h2 id=&#34;第三篇-su功能详解&#34;&gt;第三篇 su功能详解&lt;/h2&gt;

&lt;p&gt;这一篇主要讲解su中每一个工具值得注意的地方，我们开始吧~~&lt;/p&gt;

&lt;p&gt;首先为大家推荐两本学习su的好书：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;《Sketchup设计大师 基础》 鲁英灿 主编 清华大学出版社
《Sketchup设计大师 提高》 鲁英灿 主编 清华大学出版社
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是两本横着翻的大红色的非常厚的书，里面讲解的非常细致，如果自认为有一些基础的，直接买提高就可以，书蛮贵的，但是很值，书很厚，但是讲的很全，很细，如果你实在不想看书，就看看下面我写的这些东西吧……&lt;/p&gt;

&lt;h3 id=&#34;明确几个概念&#34;&gt;明确几个概念：&lt;/h3&gt;

&lt;p&gt;1.模型空间：一个模型空间，指的是当前状态下所有可直接编辑的物体的集合，比如一个新打开的模型，只具有一个模型空间，如果我创建了一个群组或组件，那么这个模型中就有两个模型空间，在外部的模型空间，不能编辑组或组件模型空间内的物体，在组或组件的模型空间内，不能编辑外部的物体，明白这个概念非常重要。&lt;/p&gt;

&lt;h4 id=&#34;一-绘图工具&#34;&gt;一、绘图工具&lt;/h4&gt;

&lt;p&gt;1.直线工具：
    绘制直线时，如果模型单位是mm，画一条100m的直线，可以直接输入100m，su会自动换算。
    按住shift可以锁定当前的参考信息，请注意这种锁定不仅适用于捕捉直线的终点，绘制起点时也可以使用。&lt;/p&gt;

&lt;p&gt;2.矩形工具：
    总的来说su的矩形工具极其难用，建议大家改用“自由矩形”插件。&lt;/p&gt;

&lt;p&gt;3.圆弧工具：
    在绘制完弧线后可以输入“数字s”，来指定弧线的段数，需要注意的是这个指定的段数会影响以后绘制的所有弧线。
    绘制弧线，尤其是绘制连续弧线时，经常会遇到找不准方向的情况，这是可以通过绘制辅助面来解决。
    绘制圆弧，也可以指定半径，在点击了圆弧的起点后，输入“数字r”，按回车即可指定圆弧的半径。&lt;/p&gt;

&lt;p&gt;4.圆形工具：
    事实上圆形的边界是由一定数量的线段构成的，捕捉到任意一条线段的两个断点，就可以封面。
    和圆弧工具一样，可以通过输入“数字s”方式指定圆的段数，同样会影响以后绘制的圆。建议指定的圆的段数是4的倍数。&lt;/p&gt;

&lt;p&gt;5.多边形工具：
    既然圆形可以控制边数，那么多边形工具几乎没有什么用。
    唯一的区别是使用圆形工具绘制的多边形在推拉后生成的曲面默认是柔滑的，而使用多边形工具绘制的则不是。&lt;/p&gt;

&lt;p&gt;6.不规则线段工具：
    这个工具我一般拿来画2D树&lt;/p&gt;

&lt;h4 id=&#34;二-编辑工具&#34;&gt;二、编辑工具&lt;/h4&gt;

&lt;p&gt;1.选择工具：
    单击一个物体以选中，双击可以选择相邻的物体，三击可以选择所有联系的物体。
    使用右键菜单里的“选择相同材质物体”的选项，不能使用在赋予默认材质的物体上。
    在贴了贴图的面上单击右键，有一个“贴图”二级菜单，可以调整贴图的大小，位置，变形，投影贴图等属性。&lt;/p&gt;

&lt;p&gt;2.橡皮工具：
    使用橡皮工具按住鼠标左键拖动，可以删除多个物体，但移动速度过快则会忽略一些物体。
    按住shift点击鼠标，可以隐藏擦除的物体，按住ctrl点鼠标则可以柔化边线，按住ctrl+shift点鼠标可以还原柔化，柔化后的边线不能通过“编辑|显示”菜单中的命令显示。&lt;/p&gt;

&lt;p&gt;3.推拉工具：
    前后两个表面互相平行时，可以使用推拉工具进行镂空操作。
    在推拉工具状态下，双击物体的表面，会自动应用上一次的推拉数值。
    按住Alt键使用推拉工具，可以强制表面沿着它的垂直方向移动。
    按住ctrl键使用推拉工具，可以沿底面复制生成新的表面。&lt;/p&gt;

&lt;p&gt;4.偏移工具：
    偏移工具可以对表面或一组共面的线进行偏移复制。
    偏移过的曲线会成为分段的多段线，不再具有曲线的特性。&lt;/p&gt;

&lt;p&gt;5.路径跟随工具：
    要注意截面与放样路其实可以在不同的模型空间中。具体操作是这样的：先在组件或群组外选择好路径或路径围成的面，然后选择路径跟随命令，把鼠标移到组件或群组上（光标显示禁止状态），点右键，选择编辑组件（群组），进入它内部，就可以选择需要放样的截面了。（此技巧来自276楼吧友andyndkgx，在此表示感谢）
    一般放样的截面应当与放样路径相垂直，否则可能得不到想要的效果。如果路径中有曲线，则放样的截面会随着路径转动，解决这个问题需要使用fak插件。
    路径跟随可以制作具有对称轴的物体，如圆锥、瓶子等。&lt;/p&gt;

&lt;p&gt;6.移动工具：
    按住ctrl键使用移动工具，可以复制物体。
    复制完毕后，在数值框内输入“数字x”，将按照本次复制的方向，距离再重复复制“数字-1”次。输入“数字/”，则将本次复制的距离等分为“数字”份，重复复制“数字”-1次。（有点乱，大家实践吧……）
    移动工具不但可以移动直线、物体，还可以移动端点，单独移动物体上的一个边或端点，可以变形物体。&lt;/p&gt;

&lt;p&gt;7.旋转工具：
    和移动工具一样，按住ctrl键可以复制，旋转工具可以实现环形阵列。
    旋转工具也可以变形物体。&lt;/p&gt;

&lt;p&gt;8.缩放工具：
    按住ctrl键使用缩放工具，可以以物体的中心为缩放中心。
    使用缩放工具可以快速制作台体或圆台。
    使用缩放工具，缩放比例为-1时可以实现选定方向的镜像。&lt;/p&gt;

&lt;h4 id=&#34;三-辅助工具&#34;&gt;三、辅助工具&lt;/h4&gt;

&lt;p&gt;1.测量工具：
    测量工具可以测量任意两点之间的距离，在新版本中，按下ctrl键，数遍右下角出现+时还可以用来创建辅助线，
    菜单栏“查看|辅助线”可以控制所有辅助线的显隐，“编辑|删除辅助线”可以一次性删除所有的辅助线，为这两个命令设置快捷键可以很方便的管理辅助线。
    辅助线还具有全局缩放的功能，激活测量工具，一次单击某个线段的两个断点，这时你会发现没有绘制出辅助线，此时两点间的长度会显示在数值框里，输入一个新数值，按回车后出现对话框询问是否缩放模型，点击“是”即可。此功能只对当前模型空间有效，因此全局缩放不能缩放组件的大小，在组件内部使用全局缩放，也不能影响外部模型的大小。&lt;/p&gt;

&lt;p&gt;2.量角器工具：
    量角器工具可以测量角度，并绘制出辅助线，如果不想绘制辅助线，可以按住shift键
    在su中会经常发现在一个点的位置捕捉某个平面的方向非常困难，此时可以绘制辅助面辅助捕捉。
    量角器工具创建辅助线不仅可以直接输入角度，也可以输入角的正切，方法是在数值栏输入“对边:邻边”。&lt;/p&gt;

&lt;p&gt;3.尺寸标注工具：
    这个工具很少用到。&lt;/p&gt;

&lt;p&gt;4.文字标注工具：
    文字标注有两类，引注文字和屏幕文字，凡是在模型表面上添加的文字，都是引注文字，特点是随着模型的旋转文字也跟着旋转；在屏幕空白处添加的文字，是屏幕文字，它在屏幕上的位置是固定的。&lt;/p&gt;

&lt;p&gt;5.坐标工具：
    利用坐标命令可以为斜面创建新的坐标系，方便在斜面上的精确操作。但一般情况下应时刻保持坐标系在原始位置，因为如果坐标系不在原始位置可能导致插入具有面向相机属性的组件时发生错误。&lt;/p&gt;

&lt;p&gt;6.剖面工具：
    一个模型空间中只允许有一个激活的剖面，但多个模型空间内的剖面可以同时激活，比如组或组件内的剖面。
    在一个激活的剖面上单击右键，可以看到“从剖切创建组”命令，通过这个命令可以生成一个包含剖断线的组。&lt;/p&gt;

&lt;h4 id=&#34;四-相机工具&#34;&gt;四、相机工具&lt;/h4&gt;

&lt;p&gt;1.视图旋转工具：
    这个工具几乎不用，因为按住鼠标滚轮就可以实现。&lt;/p&gt;

&lt;p&gt;2.视图缩放工具：
    视图缩放工具一般用来设置透视角度和相机的焦距，激活缩放工具后，数值栏里会显示当前的透视角度或相机焦距，其中透视角度的单位是deg，相机焦距的单位是mm，输入数值可以指定新的相机特性，如果当前显示的是透视角度，则输入的数值改变的是透视角度，如果当前显示的是相机焦距，则改变的是相机焦距。&lt;/p&gt;

&lt;p&gt;3.平移工具：
    按下鼠标滚轮和shift键即可实现平移功能。&lt;/p&gt;

&lt;p&gt;4.窗选放大工具：
    这个没什么解释的。&lt;/p&gt;

&lt;p&gt;5.视图全屏显示：
    这个非常有用，默认快捷键是shift+Z&lt;/p&gt;

&lt;p&gt;6.撤销视图变更：
    这个也非常有用，在模型缩放到比较大的情况下，经常会不小心移动了视图，使用这个命令可以返回上一个视图，快捷键为F9，但是注意并不是所有的视图改变都可以撤销，比如改变相机焦距就无法撤销。&lt;/p&gt;

&lt;h4 id=&#34;五-观察工具&#34;&gt;五、观察工具&lt;/h4&gt;

&lt;p&gt;1.相机位置工具：
    激活相机位置工具，单击模型中的任意点，即可将相机水平移动至该位置，默认视高是人眼视高，此时环视工具会自动激活，可以在数值栏输入新的相机高度，注意这个高度是相对于原始坐标系的xy平面的高度，并不是相对于放置相机时所单击的点的相对高度。&lt;/p&gt;

&lt;p&gt;2.漫游工具：
    很少用，很难用。&lt;/p&gt;

&lt;p&gt;3.环视工具：
    见“相机位置工具”。&lt;/p&gt;

&lt;h4 id=&#34;六-视图工具&#34;&gt;六、视图工具&lt;/h4&gt;

&lt;p&gt;1.标准视图工具：
    按照工具栏上的顺序，他们的快捷键分别是：F8、F2、F3、F4、F5、F6，另外F7是底视图的快捷键，底视图没有工具栏图标。&lt;/p&gt;

&lt;p&gt;2.透视和轴侧模式：
    这个大家都明白，相比透视模式，轴侧模式下性能有所下降，更易出现显示错误。&lt;/p&gt;

&lt;p&gt;3.显示模式工具：
    su有“线框、消隐、着色、贴图”四种显示模式，消耗的资源依次增加，其中线框模式中不能进行任何与面有关的操作，另外还有X光模式和单色模式，单色模式常用来纠正模型中的正反面错误。&lt;/p&gt;

&lt;h4 id=&#34;七-地形工具&#34;&gt;七、地形工具&lt;/h4&gt;

&lt;p&gt;地形工具是在su pro版本中自带的一款插件，功能非常强大，但由于其本质上是属于插件范畴，而网上各种教程也很多，我这里就不赘述了，仅提示几点：&lt;/p&gt;

&lt;p&gt;1.地形工具的使用基本上分两步：“创建地形”和“创建地形上部的主体”，相应的工具也可以分为这两类。&lt;/p&gt;

&lt;p&gt;2.创建地形：创建地形有两种方法“根据等高线创建”和“根据网格创建”，就实际经验来看，根据网格创建可以得到比较平滑的地形，而根据等高线创建在坡度较缓的位置由于等高线较疏，因而地形会出现棱角；另外，如果是从cad导入的地形，由于su不支持贝斯曲线的缘故，因此导入的等高线在弧度大的位置可能会出现较大的变形，这将直接导致无法精确绘制。&lt;/p&gt;

&lt;p&gt;3.地形工具在计算时，为了避免出现破面的情况，将所有的面都进行了“三角化”操作，因此生成的曲面包含的线非常之多，必要的情况下应当予以清理。&lt;/p&gt;

&lt;p&gt;4.请大家注意地形工具其实是一个非常好的曲面建模工具，由于地形工具在计算时采用了“三角化”的方式，因此它的稳定性非常高。&lt;/p&gt;

&lt;h4 id=&#34;八-阴影设置&#34;&gt;八、阴影设置&lt;/h4&gt;

&lt;p&gt;su的阴影是通过openGL计算生成的，因此在导出矢量文件时阴影信息无法被导出，su阴影的设置也比较简单：&lt;/p&gt;

&lt;p&gt;1.地面阴影和表面阴影：su有两个阴影系统，当我们的模型有出于xy平面以下的部分时，我们需要关闭地面阴影来防止双重阴影的产生。另外，在“实体信息”面板里，还可以控制每一个表面是否“产生投影”和“接收投影”。&lt;/p&gt;

&lt;p&gt;2.su的阴影是基于地理纬度信息的，可以在“模型信息”中设置。&lt;/p&gt;

&lt;p&gt;3.材质的透明度与阴影：在su中，所有的阴影都是一种灰度的颜色，su不能处理半透明的阴影，因此对于透明度大于70的材质，显示阴影，对于透明度小于70的材质，不显示阴影。&lt;/p&gt;

&lt;p&gt;4.阴影的错误：有时候当阴影比较复杂时，我们会发现明显的阴影错误，这大多是由于驱动程序错误导致的，需要更新显卡驱动程序。&lt;/p&gt;

&lt;p&gt;5.use sun of shading：这个选项可以在不打开阴影的状态下显示物体相对于阳光的明暗关系，很多su内置的渲染器对这个功能支持不是很好，如果模型需要渲染，请不要选择这个选项。&lt;/p&gt;

&lt;p&gt;6.一种特殊的效果：前面说了在su中，提供了很多显示模式，其中常用的是“线框、消隐、着色、贴图”四种，有一种现象我要说明一下：对于一个全部都是白色材质的模型，在“风格”窗口中将背景色调整为白色，请大家观察“消隐”和“着色”两种显示模式的区别，可以发现，在“消隐”模式下，所有的面是白色的，不管如何旋转模型，每个面都是白色的；在“着色”模式下，不同的面相对于相机的角度不同而产生了不同的灰度。这有什么意义呢？也许做室内的朋友遇到过这种情况，导出的图片中原本相同材质的表面由于相对于相机的角度不同而产生了不同的颜色，更要命的是明明是白色的墙这时候会变成灰色，非常影响设计意图的表达。那么怎么样才能既显示贴图，又达到和“消隐”模式一样的效果呢？答案就在阴影设置里，在这种情况下，请打开阴影，将阴影控制面板里下方的“光”“影”两个滑块都拉到最右端，即可消除由于角度带来的失真。&lt;/p&gt;

&lt;h4 id=&#34;九-导入导出&#34;&gt;九、导入导出&lt;/h4&gt;

&lt;p&gt;su提供了很多文件格式的导入和导出，这里我也简单介绍一下：&lt;/p&gt;

&lt;p&gt;1.导入DWG/DXF格式文件：&lt;/p&gt;

&lt;p&gt;一般我们在启动su时，选择的模板单位都是mm，而导入的dwg或dxf文件的单位一般也是mm，这很重要。导入的时间视文件大小而定，若导入之前场景中已经有别的实体存在，则导入的集合体会自动合并为一个组件，以免影响已有的几何体。&lt;/p&gt;

&lt;p&gt;su支持的cad实体包括“线、圆弧、圆、pl线、面、有厚度的实体、三维面、块”，另外还支持cad的图层，目前不支持的实体包括“acd创建的实体、面域、spl、宽度不一的pl线、填充、标注、文字、Xrefs、ADT/ARX”等，这些物体在导入时将被忽略。&lt;/p&gt;

&lt;p&gt;导入过大的cad文件，非常容易死机，同时也不利于进一步绘图，因此应当适当简化cad文件后再导入，或者分层导入。&lt;/p&gt;

&lt;p&gt;导入选项：导入时右下角有选项按钮，可以设置相关选项，首先要确保单位的统一，另外还有两个选项“Merge coplanar faces-合并同一平面上的面”和“Orient face consistently-统一表面”，前者用来清理cad中被三角化的面，后者用来统一cad中个表面的法线方向。&lt;/p&gt;

&lt;p&gt;2.导入3ds格式文件：&lt;/p&gt;

&lt;p&gt;3ds文件的导入，比较简单，在导入选项中可以设置单位，另外有一个选项是“合并共面”，和导入cad的选项完全一致。&lt;/p&gt;

&lt;p&gt;3.导入二维图像：&lt;/p&gt;

&lt;p&gt;su支持的格式有jpeg、png、tga、bmp、tif等。&lt;/p&gt;

&lt;p&gt;由于su模型文件的单文件特性，因此模型中用到的全部贴图都保存在文件里，所以不要使用体积庞大的图片文件，这样会迅速增大文件的体积。另外，由于su支持的最大贴图尺寸是1024，因此不论导入多大尺寸的图片，su在使用时都会压缩为长边不超过1024像素的图片来使用。这里还有一点需要提示，导入的图片，是一个单独的实体，它既不是组件，也不是群组，在材质浏览器里也看不到图片使用的材质，这时，图片是以文件的形式保存在模型中的，而如果你将图片炸开，那么它将转换为一个平面，之前的图片，就以贴图的形式存在于模型中了。虽然su将导入的图片缩放为1024像素，但是并没有改变原始的图像，在导入的图像没有被炸开时，你还可以右击图片选择“导出”重新得到这张图片，因此，导入过大的图片不但增加模型的大小，而且拖慢su的响应速度。&lt;/p&gt;

&lt;p&gt;4.导出二维图形图像：&lt;/p&gt;

&lt;p&gt;su支持二维图形图像的导出，格式包括pdf、eps、bmp、jpg、tif、png、dwg、dxf，其中基于矢量模式的图形，如pdf、eps、dwg、dxf，不能导出诸如贴图、阴影、背景和透明度等显示效果。&lt;/p&gt;

&lt;p&gt;导出pdf/eps格式：这两种格式导出有很多选项，可以控制导出图像的尺寸（限制在7200像素以内），比例（是模型比例不是图面比例，只有三视图和等角轴侧可以按比例导出），可以控制是否导出“轮廓线”“剖面线”“出头线”等风格。&lt;/p&gt;

&lt;p&gt;导出bmp/jpg/tif/png格式：这一部分的内容前面已经叙述过了，再次提醒大家尽量不要选择“抗锯齿”选项。&lt;/p&gt;

&lt;p&gt;导出dwg/dxf格式：导出cad格式的文件，我们一般都直接导出1：1的比例，虽然导入时我们不能识别有宽度信息的pl线，但是在导出时可以设置，在“profile line-轮廓线”部分设置，一般默认是不导出轮廓线的，但是需要的情况下可以选择第二个“polylines with width”来导出具有宽度的线。选中下面的“separeate on a layer-独立图层”可以为导出的轮廓线创建独立的图层，方便管理。最下方的选项提供了导出延长线的选项，需要注意的是延长线在su中不会对捕捉产生影响，但是在cad中会影响捕捉。&lt;/p&gt;

&lt;p&gt;5.导出三维模型：&lt;/p&gt;

&lt;p&gt;这一部分内容本人接触很少，暂缺吧……&lt;/p&gt;

&lt;p&gt;6.导出动画：&lt;/p&gt;

&lt;p&gt;这一部分内容本人接触更少，也暂缺吧……&lt;/p&gt;

&lt;p&gt;总而言之，言而总之，常用的一些主要共能到这里就简单介绍完了，另外还有一些细小的功能再次不再赘述，没有涉及到的功能有：模型交错、边线显示模式、页面、柔化边线和平滑表面等，主要是因为功能比较鸡肋或者非常简单，只要用过一次，就应该能掌握。&lt;/p&gt;

&lt;p&gt;细心的朋友们可能发现，有两个很重要的内容我没有提到，不要急，下面就是了~&lt;/p&gt;

&lt;h2 id=&#34;第四篇-su的材质和组件&#34;&gt;第四篇 su的材质和组件&lt;/h2&gt;

&lt;p&gt;su的材质系统，是由“油漆桶工具”和“材质面板”组成的，这两个部分是紧密联系的，在su的材质概念中，由两个部分组成，分别是“材质”和“贴图”，我们在平时的言语中通常会混淆这两个概念，但在本篇文章中，“材质”仅包含颜色信息，“贴图”包含材质和一张纹理贴图，在su中，“贴图”可以看做是在纹理贴图上加上了某种颜色的材质的遮罩。&lt;/p&gt;

&lt;h3 id=&#34;一-油漆桶工具和材质面板&#34;&gt;一、油漆桶工具和材质面板&lt;/h3&gt;

&lt;h4 id=&#34;1-赋材质&#34;&gt;1.赋材质&lt;/h4&gt;

&lt;p&gt;激活油漆桶工具，则材质面板同时出现，先在“select-选择”选项卡中选择一个材质，此时使用油漆桶工具单击场景中的物体，就可以给这个物体赋予材质，这时单击“选择”选项卡里的“小房子”图标，可以显示模型文件包含的所有材质，材质面板右上角竖向第三个按钮，是场景中的默认材质，场景中的其他材质显示在下方的列表里，在缩略图显示模式下，右下角有白色小三角符号的材质，是模型中当前正在使用的材质，没有白色小三角的材质，是曾经使用过，但现在不再使用的材质。&lt;/p&gt;

&lt;h4 id=&#34;2-设置颜色&#34;&gt;2.设置颜色&lt;/h4&gt;

&lt;p&gt;材质面板的另一个选项卡“Eidt-编辑”中，可以编辑选定的材质，在编辑器中，通过下拉列表可以选择颜色系统，有色轮、hls、hsb、和rgb四种颜色系统可供选择，其中个人推荐hsb颜色模式。&lt;/p&gt;

&lt;h4 id=&#34;3-设置材质贴图&#34;&gt;3.设置材质贴图&lt;/h4&gt;

&lt;p&gt;如果在“选择”选项卡中选取了带有贴图的材质，则在“编辑”选项卡中会显示相关信息，如果当前选择的材质没有贴图信息，在“编辑”选项卡里也可以快速创建，选中“user texture image-使用纹理贴图”复选框，表示此材质使用贴图，在随后弹出的对话框中指定贴图文件，即可添加贴图信息。&lt;/p&gt;

&lt;h4 id=&#34;4-透明材质&#34;&gt;4.透明材质&lt;/h4&gt;

&lt;p&gt;通过调整“编辑”选项卡下方的不透明度滑块调节，前文说过，透明的质量控制位于“风格面板”里，不同版本的su可能略有不同。su的透明有很大的局限性，第一，透明物体的阴影不准确，su不能产生半透明的阴影，第二，透明的面要么产生阴影要么不产生阴影，临界值为70，第三，只有完全不透明的面才能受影，透明的表面不能受影。&lt;/p&gt;

&lt;h4 id=&#34;5-材质的管理&#34;&gt;5.材质的管理&lt;/h4&gt;

&lt;p&gt;清除未使用的材质：场景中曾经使用过但有被替换了的材质右下角没有标记，点击材质面板右侧的“detail”箭头，在下拉菜单中选择“Purge unused-清理未使用”命令，可以清理模型中不用的材质。&lt;/p&gt;

&lt;p&gt;选择相同材质物体：在已经使用了的材质上点击右键，选择“select-选择”，所有赋予了这个材质的物体均会被选上，在模型中赋予材质的表面上点击右键，也有选择相同材质物体的功能，但是不能用在默认材质上。&lt;/p&gt;

&lt;p&gt;计算面积：在已经使用了的材质上点击右键，选择“Area-面积”，会弹出消息框，显示所有赋予了这个材质的表面的面积。&lt;/p&gt;

&lt;p&gt;修改贴图：对于有贴图的材质，还可以右键点击“Edit texture image-编辑材质贴图”，调用外部编辑器进行编辑。&lt;/p&gt;

&lt;h3 id=&#34;二-贴图坐标&#34;&gt;二、贴图坐标&lt;/h3&gt;

&lt;p&gt;在su中，对一个表面赋予某个还有贴图的材质后，虽然可以在材质面板里编辑材质的大小，但是如果移动物体，会发现贴图并不随之移动，那是因为贴图的坐标被固定在了模型的原点，如果想要制作一个可以跟着物体移动的贴图，就必须将这个物体制作成组件，在组件中进行贴图，因为每一个组件中都有独立的坐标原点。&lt;/p&gt;

&lt;p&gt;对于贴图需要准确对位或发生倾斜、变形时，就需要用到贴图坐标的概念了，选择一个贴有贴图的表面，在右键的快捷菜单里选择“Texture-贴图|Position-贴图坐标”可以进行设置。su的贴图坐标有两种模式：“锁定别针”和“自由别针”，以满足不同效果的需求。贴图坐标只能在平面上进行，对于曲面无效。&lt;/p&gt;

&lt;h4 id=&#34;1-锁定别针模式&#34;&gt;1.锁定别针模式&lt;/h4&gt;

&lt;p&gt;进入贴图坐标设置界面后，点击鼠标右键，如果看到“Fixed Pins-锁定别针”被选中，则表示现在处于锁定别针模式下。在锁定别针模式下，可以对贴图进行“移动、缩放、旋转、平行四边形变形、梯形变形”操作。四个指针形象的表示了自己的功能，拖动别针可以实现相应的功能，点击别针可以移动别针。在右键菜单里，还提供了镜像和旋转的快捷功能。&lt;/p&gt;

&lt;h4 id=&#34;2-自由别针模式&#34;&gt;2.自由别针模式&lt;/h4&gt;

&lt;p&gt;利用自由别针模式可以修正带透视变形的贴图，这个功能一般用来进行图片建模，但事实上我们很少在中校正透视，而大多数情况下是在ps中完成这个工作的。&lt;/p&gt;

&lt;h4 id=&#34;3-无缝贴图和投影贴图&#34;&gt;3.无缝贴图和投影贴图&lt;/h4&gt;

&lt;p&gt;在使用油漆桶工具赋予材质时，按住alt键，可以吸取模型中的现有材质，这种吸取同时包含了贴图的坐标信息，可以完成相邻表面的无缝贴图工作。另外在右键快捷菜单里还有“Projected-投影”选项，可以用来为一些轻微曲面贴图。&lt;/p&gt;

&lt;h3 id=&#34;三-镂空贴图&#34;&gt;三、镂空贴图&lt;/h3&gt;

&lt;p&gt;su支持具有alpha通道的png、tif、tig图片制作镂空贴图，但镂空贴图不支持阴影显示，镂空的地方依然有阴影，如果想要获得正确的阴影，需在su中将赋予镂空贴图的面挖空。&lt;/p&gt;

&lt;h3 id=&#34;材质部分的介绍到此告一段落-下面为大家介绍su的组件知识&#34;&gt;材质部分的介绍到此告一段落，下面为大家介绍su的组件知识&lt;/h3&gt;

&lt;p&gt;在su里，组件被定义为一个单位的单个或多个物体的集合，它可以批量修改和操作。su的快捷很大程度上是由组件功能体现的，但这里我要提示的一点是尽量减少组件的嵌套使用，那样会使显示速度下降。&lt;/p&gt;

&lt;h4 id=&#34;一-创建组件&#34;&gt;一、创建组件&lt;/h4&gt;

&lt;p&gt;选中要定义为组件的物体后，选择菜单栏的“编辑|创建组件”命令，会出现创建组件对话框，可以定义组件的名称、描述、对齐的平面等，如果需要在创建的组件表面上开个洞，如门窗等，则应选中“cut opening-剖切开口”复选框，组件将在于其表面相交的位置剪切开口。注意一定要在某一面墙上或者某一个面上画门或窗，再定义组件，这样在插入时才能顺利的开洞。切记！！如果定义的组件为二维物体，应该选中“always face camera-面向相机”复选框。&lt;/p&gt;

&lt;h4 id=&#34;二-编辑组件&#34;&gt;二、编辑组件&lt;/h4&gt;

&lt;p&gt;组件的编辑和编辑其他物体没有任何区别，只是进入了组件内的模型空间而已，需要单独处理的组件，一定要记得独立出来。当需要炸开组件的时候，如果是嵌套组件，一定要双击组件到最深层，由内向外逐层炸开，否则有可能会死机。&lt;/p&gt;

&lt;p&gt;组件的缩放：对于组件的缩放，有两种方式，一种是直接选中组件，进行缩放，这种方式只缩放选中的组件，不影响其他的组件，另一种方式就是双击编辑组件，在组件内部进行缩放，这时就可以同时修改所有的组件了。&lt;/p&gt;

&lt;p&gt;编辑组件时，有时会被其他物体挡住视线，在菜单栏“显示|组件编辑”里有两个选项，可以分别设置当双击进入一个组件或者群组时，是否隐藏模型中的其他内容和是否隐藏相同的组件，这个功能非常有用。&lt;/p&gt;

&lt;p&gt;给组件赋材质时，有两种方式，一种是双击进入组件内部，再进行赋材质操作，我首推这种方法。另一种方法是不进入组件，直接给组件赋材质，这种方式会使用新材质替换组件内所有的默认材质，而非默认材质则不受影响，这种方式在后期渲染中经常出错，请大家慎用。&lt;/p&gt;

&lt;h4 id=&#34;三-组件管理器&#34;&gt;三、组件管理器&lt;/h4&gt;

&lt;p&gt;在比较大的场景中，组件或组非常多，并且有嵌套关系，这时修改就变得非常困难，“Outliner-组件管理器”可以显示模型中全部的组件和组，以及嵌套关系，如果组件在创建时命名明确的话，可以在这里方便的找到。&lt;/p&gt;

&lt;h3 id=&#34;四-动态组件&#34;&gt;四、动态组件&lt;/h3&gt;

&lt;p&gt;动态组件是su在7.0版本引入的一个类型，关于动态组件我在此不再赘述，有机会我会出一个动态组件教程，我唯一要提醒的是动态组件在渲染中经常出问题，慎用！&lt;/p&gt;

&lt;p&gt;ok，至此，su的主要功能的介绍就进行完了，下面为大家介绍一些平时用得着的小技巧。&lt;/p&gt;

&lt;h2 id=&#34;第五篇-su使用技巧&#34;&gt;第五篇 su使用技巧&lt;/h2&gt;

&lt;p&gt;su作为越来越流行的一款建模软件，有着很多它独有的特点和优势，当然也存在着缺点和不足，如果只是照着帮助文档依次学习每个工具，那永远也无法成为高手，软件是死板的，人是灵活的，遇到问题多思考、寻找源头，才能更熟悉和了解软件的精髓。&lt;/p&gt;

&lt;h3 id=&#34;一-封面&#34;&gt;一、封面&lt;/h3&gt;

&lt;p&gt;说到封面，相信每个人都不同程度的遇到过，尤其是7.0以前的版本，在封面方面着实让人头疼，一般情况下，如果有大量不能封闭的面，可以在风格面板开启轮廓线，未封面的线将以粗线条显示。识别封面错误，首先应该判断需要封面的线是否真的在一个平面内，如果在一个平面内，就要判断这些线是否首尾相接。在这里，我为大家罗列一下不能封面的几种情况：&lt;/p&gt;

&lt;h4 id=&#34;1-直线虚交&#34;&gt;1.直线虚交：&lt;/h4&gt;

&lt;p&gt;所谓直线虚交，就是指两条直线虽已交叉，但是没有求出焦点，所以彼此没有互相截断，也就无法封面，这个问题在7.0以前的版本尤为的突出，在7.0引入“相交线自动截断”功能后，这种情况几乎绝迹了，如果你还使用7.0以前的版本，那么有一个方法你可以试试，激活移动工具，不要点选任何物体，将鼠标依次移到不能封面的边线上，鼠标经过的边线会高亮显示，如果有直线虚交的情况，可以及时发现。&lt;/p&gt;

&lt;h4 id=&#34;2-接头虚交&#34;&gt;2.接头虚交：&lt;/h4&gt;

&lt;p&gt;所谓接头虚交，就是指两条直线在断点处看似相交了，使用移动工具高亮观察也没有直线虚交的情况，但其实在交点处存在误差，有很小距离的缺口，导致无法封面，识别这个问题的方法就是使用移动工具，在不选择任何物体的情况下点击两条线的焦点，移动鼠标，如果两条线确实相交，则两条线都会随之移动，如果只有一条线移动，则表明两线接头虚交。&lt;/p&gt;

&lt;h4 id=&#34;3-t型虚交&#34;&gt;3.T型虚交：&lt;/h4&gt;

&lt;p&gt;所谓T型虚交，就是指一条线和另一条线程T字型排列，交叉接头处由于细小的误差导致不能封面，检查这种错误的方法就是使用移动工具高亮显示T型接口的被截边，如果发现没有被截断，则此处出现了虚交。&lt;/p&gt;

&lt;h3 id=&#34;二-关于性能&#34;&gt;二、关于性能&lt;/h3&gt;

&lt;p&gt;关于su的性能问题，最根本的解决方式就是在不影响表达的前提下尽量控制面的数量，这里请大家参考我之前的帖子，这里不再赘述：&lt;/p&gt;

&lt;p&gt;【事半功倍】SketchUp 的资源占用、硬件支持与使用技巧
【这里的黎明静悄悄】再谈sketchup的硬件支持问题&lt;/p&gt;

&lt;p&gt;另外，有如下几点提示：第一、绘图中尽量避免出现废线，废线一般是在使用推拉工具时产生的，除了分割材质的必要的线，应当予以清除；第二、善用材质贴图，对背景、配景部分，使用照片建模是节省资源的最有效途径，但使用贴图时要注意整个图面风格，力求视觉上的统一、和谐；第三、要经常清理未使用的组件和材质，控制模型的体积。&lt;/p&gt;

&lt;h3 id=&#34;三-关于习惯&#34;&gt;三、关于习惯&lt;/h3&gt;

&lt;p&gt;在使用中想要得心应手，一些良好的习惯是必须要迅速养成的，这里我简单提几点：&lt;/p&gt;

&lt;h4 id=&#34;1-图层的应用&#34;&gt;1.图层的应用：&lt;/h4&gt;

&lt;p&gt;图层的概念，在su中似乎使用的较少，对于场景较大的模型，使用图层控制模型中实体的显隐，是非常实用的提高速度、方便管理的技巧。另外，在图层面板右上角的菜单里，选择“color by layer-图层颜色”模式，可以快速按图层颜色显示物体，这对于制作类似“功能分析”的图纸非常有用。&lt;/p&gt;

&lt;h4 id=&#34;2-阵列&#34;&gt;2.阵列：&lt;/h4&gt;

&lt;p&gt;su的阵列功能是隐藏在移动工具里的，阵列一直是cad软件中重要的功能，而su自创的内分阵列，更是适合草模阶段的推敲，另外，在suapp中提供的路径阵列和随机阵列也是非常常用的功能。&lt;/p&gt;

&lt;h4 id=&#34;3-放样&#34;&gt;3.放样：&lt;/h4&gt;

&lt;p&gt;在su中，放样被称为路径跟随，su的放样工具是我最不满意的工具之一，比起其他软件来，su的放样工具功能单一，截面会随路径弯曲而旋转，在路径内弯处，极易出现破面等，是令人十分头痛的问题，一般情况下对放样路径推荐使用插件进行优化，必要时使用fak插件防止截面旋转。&lt;/p&gt;

&lt;h4 id=&#34;4-组件替换&#34;&gt;4.组件替换：&lt;/h4&gt;

&lt;p&gt;组件替换的功能我本人很少使用，个人认为这个功能在多人合作建模时比较有用。&lt;/p&gt;

&lt;h4 id=&#34;5-模型交错&#34;&gt;5.模型交错：&lt;/h4&gt;

&lt;p&gt;su的模型交错功能，一般可以用来求交线，但是相交错的实体不能太复杂，否则会死机，产生的交线出现在当前的模型空间，也就是说如果在组件内使用模型交错，则交线出现在组件内，不影响组件外的物体。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>